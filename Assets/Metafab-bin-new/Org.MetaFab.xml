<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Org.MetaFab</name>
    </assembly>
    <members>
        <member name="T:Org.MetaFab.Api.IContractsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Org.MetaFab.Client.IApiAccessor">
            <summary>
            Represents configuration aspects required to interact with the API endpoints.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Client.IApiAccessor.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Org.MetaFab.Client.IApiAccessor.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Org.MetaFab.Client.IApiAccessor.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Api.IContractsApi.CreateContract(System.String,Org.MetaFab.Model.CreateContractRequest)">
            <summary>
            Create custom contract
            </summary>
            <remarks>
            Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract's read and write functions through MetaFab's read and write contract endpoints.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="createContractRequest"></param>
            <returns>ContractModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IContractsApi.CreateContractWithHttpInfo(System.String,Org.MetaFab.Model.CreateContractRequest)">
            <summary>
            Create custom contract
            </summary>
            <remarks>
            Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract's read and write functions through MetaFab's read and write contract endpoints.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="createContractRequest"></param>
            <returns>ApiResponse of ContractModel</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IContractsApi.GetContracts(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IContractsApi.GetContractsWithHttpInfo(System.String)" -->
        <member name="M:Org.MetaFab.Api.IContractsApi.ReadContract(System.String,System.String,System.String)">
            <summary>
            Read contract data
            </summary>
            <remarks>
            Oftentimes you'll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
            <param name="func">A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, `balanceOf`.</param>
            <param name="args">A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, `123,\"Hello\",false`. (optional)</param>
            <returns>Object</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IContractsApi.ReadContractWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Read contract data
            </summary>
            <remarks>
            Oftentimes you'll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
            <param name="func">A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, `balanceOf`.</param>
            <param name="args">A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, `123,\"Hello\",false`. (optional)</param>
            <returns>ApiResponse of Object</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IContractsApi.WriteContract(System.String,System.String,System.String,Org.MetaFab.Model.WriteContractRequest)">
            <summary>
            Write contract data
            </summary>
            <remarks>
            MetaFab's convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract's ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab's ERC2771 trusted forwarder contract.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="writeContractRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IContractsApi.WriteContractWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.WriteContractRequest)">
            <summary>
            Write contract data
            </summary>
            <remarks>
            MetaFab's convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract's ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab's ERC2771 trusted forwarder contract.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="writeContractRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IContractsApi.CreateContractAsync(System.String,Org.MetaFab.Model.CreateContractRequest,System.Threading.CancellationToken)">
            <summary>
            Create custom contract
            </summary>
            <remarks>
            Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract's read and write functions through MetaFab's read and write contract endpoints.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="createContractRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ContractModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IContractsApi.CreateContractWithHttpInfoAsync(System.String,Org.MetaFab.Model.CreateContractRequest,System.Threading.CancellationToken)">
            <summary>
            Create custom contract
            </summary>
            <remarks>
            Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract's read and write functions through MetaFab's read and write contract endpoints.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="createContractRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (ContractModel)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IContractsApi.GetContractsAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.IContractsApi.GetContractsWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get contracts
            </summary>
            <remarks>
            Returns an array of active contracts deployed by the game associated with the provided `X-Game-Key`.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (List&lt;ContractModel&gt;)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IContractsApi.ReadContractAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Read contract data
            </summary>
            <remarks>
            Oftentimes you'll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
            <param name="func">A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, `balanceOf`.</param>
            <param name="args">A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, `123,\"Hello\",false`. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of Object</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IContractsApi.ReadContractWithHttpInfoAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Read contract data
            </summary>
            <remarks>
            Oftentimes you'll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
            <param name="func">A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, `balanceOf`.</param>
            <param name="args">A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, `123,\"Hello\",false`. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (Object)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IContractsApi.WriteContractAsync(System.String,System.String,System.String,Org.MetaFab.Model.WriteContractRequest,System.Threading.CancellationToken)">
            <summary>
            Write contract data
            </summary>
            <remarks>
            MetaFab's convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract's ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab's ERC2771 trusted forwarder contract.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="writeContractRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IContractsApi.WriteContractWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.WriteContractRequest,System.Threading.CancellationToken)">
            <summary>
            Write contract data
            </summary>
            <remarks>
            MetaFab's convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract's ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab's ERC2771 trusted forwarder contract.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="writeContractRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="T:Org.MetaFab.Api.ContractsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.ContractsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.ContractsApi"/> class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.#ctor(Org.MetaFab.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.ContractsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.CreateContract(System.String,Org.MetaFab.Model.CreateContractRequest)">
            <summary>
            Create custom contract Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract's read and write functions through MetaFab's read and write contract endpoints.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="createContractRequest"></param>
            <returns>ContractModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.CreateContractWithHttpInfo(System.String,Org.MetaFab.Model.CreateContractRequest)">
            <summary>
            Create custom contract Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract's read and write functions through MetaFab's read and write contract endpoints.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="createContractRequest"></param>
            <returns>ApiResponse of ContractModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.CreateContractAsync(System.String,Org.MetaFab.Model.CreateContractRequest,System.Threading.CancellationToken)">
            <summary>
            Create custom contract Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract's read and write functions through MetaFab's read and write contract endpoints.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="createContractRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ContractModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.CreateContractWithHttpInfoAsync(System.String,Org.MetaFab.Model.CreateContractRequest,System.Threading.CancellationToken)">
            <summary>
            Create custom contract Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract's read and write functions through MetaFab's read and write contract endpoints.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="createContractRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (ContractModel)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ContractsApi.GetContracts(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ContractsApi.GetContractsWithHttpInfo(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ContractsApi.GetContractsAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.ContractsApi.GetContractsWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get contracts Returns an array of active contracts deployed by the game associated with the provided `X-Game-Key`.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (List&lt;ContractModel&gt;)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.ReadContract(System.String,System.String,System.String)">
            <summary>
            Read contract data Oftentimes you'll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
            <param name="func">A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, `balanceOf`.</param>
            <param name="args">A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, `123,\"Hello\",false`. (optional)</param>
            <returns>Object</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.ReadContractWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Read contract data Oftentimes you'll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
            <param name="func">A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, `balanceOf`.</param>
            <param name="args">A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, `123,\"Hello\",false`. (optional)</param>
            <returns>ApiResponse of Object</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.ReadContractAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Read contract data Oftentimes you'll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
            <param name="func">A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, `balanceOf`.</param>
            <param name="args">A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, `123,\"Hello\",false`. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of Object</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.ReadContractWithHttpInfoAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Read contract data Oftentimes you'll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
            <param name="func">A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, `balanceOf`.</param>
            <param name="args">A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, `123,\"Hello\",false`. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (Object)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.WriteContract(System.String,System.String,System.String,Org.MetaFab.Model.WriteContractRequest)">
            <summary>
            Write contract data MetaFab's convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract's ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab's ERC2771 trusted forwarder contract.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="writeContractRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.WriteContractWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.WriteContractRequest)">
            <summary>
            Write contract data MetaFab's convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract's ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab's ERC2771 trusted forwarder contract.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="writeContractRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.WriteContractAsync(System.String,System.String,System.String,Org.MetaFab.Model.WriteContractRequest,System.Threading.CancellationToken)">
            <summary>
            Write contract data MetaFab's convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract's ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab's ERC2771 trusted forwarder contract.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="writeContractRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ContractsApi.WriteContractWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.WriteContractRequest,System.Threading.CancellationToken)">
            <summary>
            Write contract data MetaFab's convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract's ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab's ERC2771 trusted forwarder contract.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="writeContractRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="P:Org.MetaFab.Api.ContractsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Org.MetaFab.Api.ContractsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="T:Org.MetaFab.Api.ICurrenciesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.BatchTransferCurrency(System.String,System.String,System.String,Org.MetaFab.Model.BatchTransferCurrencyRequest)">
            <summary>
            Batch transfer currency
            </summary>
            <remarks>
            Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="batchTransferCurrencyRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.BatchTransferCurrencyWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.BatchTransferCurrencyRequest)">
            <summary>
            Batch transfer currency
            </summary>
            <remarks>
            Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="batchTransferCurrencyRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.BurnCurrency(System.String,System.String,System.String,Org.MetaFab.Model.BurnCurrencyRequest)">
            <summary>
            Burn currency
            </summary>
            <remarks>
            Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="burnCurrencyRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.BurnCurrencyWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.BurnCurrencyRequest)">
            <summary>
            Burn currency
            </summary>
            <remarks>
            Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="burnCurrencyRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.CreateCurrency(System.String,System.String,Org.MetaFab.Model.CreateCurrencyRequest)">
            <summary>
            Create currency
            </summary>
            <remarks>
            Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCurrencyRequest"></param>
            <returns>CreateCurrency200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.CreateCurrencyWithHttpInfo(System.String,System.String,Org.MetaFab.Model.CreateCurrencyRequest)">
            <summary>
            Create currency
            </summary>
            <remarks>
            Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCurrencyRequest"></param>
            <returns>ApiResponse of CreateCurrency200Response</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ICurrenciesApi.GetCurrencies(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ICurrenciesApi.GetCurrenciesWithHttpInfo(System.String)" -->
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.GetCurrencyBalance(System.String,System.String,System.String)">
            <summary>
            Get currency balance
            </summary>
            <remarks>
            Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.GetCurrencyBalanceWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Get currency balance
            </summary>
            <remarks>
            Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>ApiResponse of decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.GetCurrencyFees(System.String)">
            <summary>
            Get currency fees
            </summary>
            <remarks>
            Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <returns>GetCurrencyFees200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.GetCurrencyFeesWithHttpInfo(System.String)">
            <summary>
            Get currency fees
            </summary>
            <remarks>
            Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <returns>ApiResponse of GetCurrencyFees200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.GetCurrencyRole(System.String,System.String,System.String,System.String)">
            <summary>
            Get currency role
            </summary>
            <remarks>
            Returns a boolean (true/false) representing if the provided role for this currency has been granted to the provided address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>bool</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.GetCurrencyRoleWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Get currency role
            </summary>
            <remarks>
            Returns a boolean (true/false) representing if the provided role for this currency has been granted to the provided address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>ApiResponse of bool</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.GrantCurrencyRole(System.String,System.String,System.String,Org.MetaFab.Model.GrantCurrencyRoleRequest)">
            <summary>
            Grant currency role
            </summary>
            <remarks>
            Grants the provided role for the currency to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the currency for specific players, addresses, or contracts to perform different types of permissioned currency operations.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="grantCurrencyRoleRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.GrantCurrencyRoleWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.GrantCurrencyRoleRequest)">
            <summary>
            Grant currency role
            </summary>
            <remarks>
            Grants the provided role for the currency to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the currency for specific players, addresses, or contracts to perform different types of permissioned currency operations.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="grantCurrencyRoleRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.MintCurrency(System.String,System.String,System.String,Org.MetaFab.Model.MintCurrencyRequest)">
            <summary>
            Mint currency
            </summary>
            <remarks>
            Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="mintCurrencyRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.MintCurrencyWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.MintCurrencyRequest)">
            <summary>
            Mint currency
            </summary>
            <remarks>
            Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="mintCurrencyRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.RevokeCurrencyRole(System.String,System.String,System.String,Org.MetaFab.Model.RevokeCollectionRoleRequest)">
            <summary>
            Revoke currency role
            </summary>
            <remarks>
            Revokes the provided role for the currency to the provided address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="revokeCollectionRoleRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.RevokeCurrencyRoleWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.RevokeCollectionRoleRequest)">
            <summary>
            Revoke currency role
            </summary>
            <remarks>
            Revokes the provided role for the currency to the provided address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="revokeCollectionRoleRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.SetCurrencyFees(System.String,System.String,System.String,Org.MetaFab.Model.SetCurrencyFeesRequest)">
            <summary>
            Set currency fees
            </summary>
            <remarks>
            Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setCurrencyFeesRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.SetCurrencyFeesWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.SetCurrencyFeesRequest)">
            <summary>
            Set currency fees
            </summary>
            <remarks>
            Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setCurrencyFeesRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.TransferCurrency(System.String,System.String,System.String,Org.MetaFab.Model.TransferCurrencyRequest)">
            <summary>
            Transfer currency
            </summary>
            <remarks>
            Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="transferCurrencyRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.TransferCurrencyWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.TransferCurrencyRequest)">
            <summary>
            Transfer currency
            </summary>
            <remarks>
            Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="transferCurrencyRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.BatchTransferCurrencyAsync(System.String,System.String,System.String,Org.MetaFab.Model.BatchTransferCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Batch transfer currency
            </summary>
            <remarks>
            Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="batchTransferCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.BatchTransferCurrencyWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.BatchTransferCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Batch transfer currency
            </summary>
            <remarks>
            Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="batchTransferCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.BurnCurrencyAsync(System.String,System.String,System.String,Org.MetaFab.Model.BurnCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Burn currency
            </summary>
            <remarks>
            Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="burnCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.BurnCurrencyWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.BurnCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Burn currency
            </summary>
            <remarks>
            Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="burnCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.CreateCurrencyAsync(System.String,System.String,Org.MetaFab.Model.CreateCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Create currency
            </summary>
            <remarks>
            Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of CreateCurrency200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.CreateCurrencyWithHttpInfoAsync(System.String,System.String,Org.MetaFab.Model.CreateCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Create currency
            </summary>
            <remarks>
            Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (CreateCurrency200Response)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ICurrenciesApi.GetCurrenciesAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.GetCurrenciesWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get currencies
            </summary>
            <remarks>
            Returns an array of active currencies for the game associated with the provided `X-Game-Key`.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (List&lt;GetCurrencies200ResponseInner&gt;)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.GetCurrencyBalanceAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get currency balance
            </summary>
            <remarks>
            Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.GetCurrencyBalanceWithHttpInfoAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get currency balance
            </summary>
            <remarks>
            Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (decimal)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.GetCurrencyFeesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get currency fees
            </summary>
            <remarks>
            Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of GetCurrencyFees200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.GetCurrencyFeesWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get currency fees
            </summary>
            <remarks>
            Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (GetCurrencyFees200Response)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.GetCurrencyRoleAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get currency role
            </summary>
            <remarks>
            Returns a boolean (true/false) representing if the provided role for this currency has been granted to the provided address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of bool</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.GetCurrencyRoleWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get currency role
            </summary>
            <remarks>
            Returns a boolean (true/false) representing if the provided role for this currency has been granted to the provided address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (bool)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.GrantCurrencyRoleAsync(System.String,System.String,System.String,Org.MetaFab.Model.GrantCurrencyRoleRequest,System.Threading.CancellationToken)">
            <summary>
            Grant currency role
            </summary>
            <remarks>
            Grants the provided role for the currency to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the currency for specific players, addresses, or contracts to perform different types of permissioned currency operations.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="grantCurrencyRoleRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.GrantCurrencyRoleWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.GrantCurrencyRoleRequest,System.Threading.CancellationToken)">
            <summary>
            Grant currency role
            </summary>
            <remarks>
            Grants the provided role for the currency to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the currency for specific players, addresses, or contracts to perform different types of permissioned currency operations.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="grantCurrencyRoleRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.MintCurrencyAsync(System.String,System.String,System.String,Org.MetaFab.Model.MintCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Mint currency
            </summary>
            <remarks>
            Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="mintCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.MintCurrencyWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.MintCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Mint currency
            </summary>
            <remarks>
            Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="mintCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.RevokeCurrencyRoleAsync(System.String,System.String,System.String,Org.MetaFab.Model.RevokeCollectionRoleRequest,System.Threading.CancellationToken)">
            <summary>
            Revoke currency role
            </summary>
            <remarks>
            Revokes the provided role for the currency to the provided address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="revokeCollectionRoleRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.RevokeCurrencyRoleWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.RevokeCollectionRoleRequest,System.Threading.CancellationToken)">
            <summary>
            Revoke currency role
            </summary>
            <remarks>
            Revokes the provided role for the currency to the provided address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="revokeCollectionRoleRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.SetCurrencyFeesAsync(System.String,System.String,System.String,Org.MetaFab.Model.SetCurrencyFeesRequest,System.Threading.CancellationToken)">
            <summary>
            Set currency fees
            </summary>
            <remarks>
            Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setCurrencyFeesRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.SetCurrencyFeesWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.SetCurrencyFeesRequest,System.Threading.CancellationToken)">
            <summary>
            Set currency fees
            </summary>
            <remarks>
            Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setCurrencyFeesRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.TransferCurrencyAsync(System.String,System.String,System.String,Org.MetaFab.Model.TransferCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Transfer currency
            </summary>
            <remarks>
            Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="transferCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ICurrenciesApi.TransferCurrencyWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.TransferCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Transfer currency
            </summary>
            <remarks>
            Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="transferCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="T:Org.MetaFab.Api.CurrenciesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.CurrenciesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.CurrenciesApi"/> class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.#ctor(Org.MetaFab.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.CurrenciesApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.BatchTransferCurrency(System.String,System.String,System.String,Org.MetaFab.Model.BatchTransferCurrencyRequest)">
            <summary>
            Batch transfer currency Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="batchTransferCurrencyRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.BatchTransferCurrencyWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.BatchTransferCurrencyRequest)">
            <summary>
            Batch transfer currency Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="batchTransferCurrencyRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.BatchTransferCurrencyAsync(System.String,System.String,System.String,Org.MetaFab.Model.BatchTransferCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Batch transfer currency Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="batchTransferCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.BatchTransferCurrencyWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.BatchTransferCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Batch transfer currency Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="batchTransferCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.BurnCurrency(System.String,System.String,System.String,Org.MetaFab.Model.BurnCurrencyRequest)">
            <summary>
            Burn currency Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="burnCurrencyRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.BurnCurrencyWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.BurnCurrencyRequest)">
            <summary>
            Burn currency Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="burnCurrencyRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.BurnCurrencyAsync(System.String,System.String,System.String,Org.MetaFab.Model.BurnCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Burn currency Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="burnCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.BurnCurrencyWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.BurnCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Burn currency Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="burnCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.CreateCurrency(System.String,System.String,Org.MetaFab.Model.CreateCurrencyRequest)">
            <summary>
            Create currency Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCurrencyRequest"></param>
            <returns>CreateCurrency200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.CreateCurrencyWithHttpInfo(System.String,System.String,Org.MetaFab.Model.CreateCurrencyRequest)">
            <summary>
            Create currency Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCurrencyRequest"></param>
            <returns>ApiResponse of CreateCurrency200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.CreateCurrencyAsync(System.String,System.String,Org.MetaFab.Model.CreateCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Create currency Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of CreateCurrency200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.CreateCurrencyWithHttpInfoAsync(System.String,System.String,Org.MetaFab.Model.CreateCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Create currency Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (CreateCurrency200Response)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.CurrenciesApi.GetCurrencies(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.CurrenciesApi.GetCurrenciesWithHttpInfo(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.CurrenciesApi.GetCurrenciesAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GetCurrenciesWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get currencies Returns an array of active currencies for the game associated with the provided `X-Game-Key`.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (List&lt;GetCurrencies200ResponseInner&gt;)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GetCurrencyBalance(System.String,System.String,System.String)">
            <summary>
            Get currency balance Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GetCurrencyBalanceWithHttpInfo(System.String,System.String,System.String)">
            <summary>
            Get currency balance Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>ApiResponse of decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GetCurrencyBalanceAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get currency balance Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GetCurrencyBalanceWithHttpInfoAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get currency balance Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (decimal)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GetCurrencyFees(System.String)">
            <summary>
            Get currency fees Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <returns>GetCurrencyFees200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GetCurrencyFeesWithHttpInfo(System.String)">
            <summary>
            Get currency fees Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <returns>ApiResponse of GetCurrencyFees200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GetCurrencyFeesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get currency fees Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of GetCurrencyFees200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GetCurrencyFeesWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get currency fees Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (GetCurrencyFees200Response)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GetCurrencyRole(System.String,System.String,System.String,System.String)">
            <summary>
            Get currency role Returns a boolean (true/false) representing if the provided role for this currency has been granted to the provided address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>bool</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GetCurrencyRoleWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Get currency role Returns a boolean (true/false) representing if the provided role for this currency has been granted to the provided address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>ApiResponse of bool</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GetCurrencyRoleAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get currency role Returns a boolean (true/false) representing if the provided role for this currency has been granted to the provided address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of bool</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GetCurrencyRoleWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get currency role Returns a boolean (true/false) representing if the provided role for this currency has been granted to the provided address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (bool)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GrantCurrencyRole(System.String,System.String,System.String,Org.MetaFab.Model.GrantCurrencyRoleRequest)">
            <summary>
            Grant currency role Grants the provided role for the currency to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the currency for specific players, addresses, or contracts to perform different types of permissioned currency operations.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="grantCurrencyRoleRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GrantCurrencyRoleWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.GrantCurrencyRoleRequest)">
            <summary>
            Grant currency role Grants the provided role for the currency to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the currency for specific players, addresses, or contracts to perform different types of permissioned currency operations.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="grantCurrencyRoleRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GrantCurrencyRoleAsync(System.String,System.String,System.String,Org.MetaFab.Model.GrantCurrencyRoleRequest,System.Threading.CancellationToken)">
            <summary>
            Grant currency role Grants the provided role for the currency to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the currency for specific players, addresses, or contracts to perform different types of permissioned currency operations.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="grantCurrencyRoleRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.GrantCurrencyRoleWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.GrantCurrencyRoleRequest,System.Threading.CancellationToken)">
            <summary>
            Grant currency role Grants the provided role for the currency to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the currency for specific players, addresses, or contracts to perform different types of permissioned currency operations.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="grantCurrencyRoleRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.MintCurrency(System.String,System.String,System.String,Org.MetaFab.Model.MintCurrencyRequest)">
            <summary>
            Mint currency Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="mintCurrencyRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.MintCurrencyWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.MintCurrencyRequest)">
            <summary>
            Mint currency Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="mintCurrencyRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.MintCurrencyAsync(System.String,System.String,System.String,Org.MetaFab.Model.MintCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Mint currency Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="mintCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.MintCurrencyWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.MintCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Mint currency Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="mintCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.RevokeCurrencyRole(System.String,System.String,System.String,Org.MetaFab.Model.RevokeCollectionRoleRequest)">
            <summary>
            Revoke currency role Revokes the provided role for the currency to the provided address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="revokeCollectionRoleRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.RevokeCurrencyRoleWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.RevokeCollectionRoleRequest)">
            <summary>
            Revoke currency role Revokes the provided role for the currency to the provided address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="revokeCollectionRoleRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.RevokeCurrencyRoleAsync(System.String,System.String,System.String,Org.MetaFab.Model.RevokeCollectionRoleRequest,System.Threading.CancellationToken)">
            <summary>
            Revoke currency role Revokes the provided role for the currency to the provided address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="revokeCollectionRoleRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.RevokeCurrencyRoleWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.RevokeCollectionRoleRequest,System.Threading.CancellationToken)">
            <summary>
            Revoke currency role Revokes the provided role for the currency to the provided address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="revokeCollectionRoleRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.SetCurrencyFees(System.String,System.String,System.String,Org.MetaFab.Model.SetCurrencyFeesRequest)">
            <summary>
            Set currency fees Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setCurrencyFeesRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.SetCurrencyFeesWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.SetCurrencyFeesRequest)">
            <summary>
            Set currency fees Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setCurrencyFeesRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.SetCurrencyFeesAsync(System.String,System.String,System.String,Org.MetaFab.Model.SetCurrencyFeesRequest,System.Threading.CancellationToken)">
            <summary>
            Set currency fees Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setCurrencyFeesRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.SetCurrencyFeesWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.SetCurrencyFeesRequest,System.Threading.CancellationToken)">
            <summary>
            Set currency fees Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setCurrencyFeesRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.TransferCurrency(System.String,System.String,System.String,Org.MetaFab.Model.TransferCurrencyRequest)">
            <summary>
            Transfer currency Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="transferCurrencyRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.TransferCurrencyWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.TransferCurrencyRequest)">
            <summary>
            Transfer currency Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="transferCurrencyRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.TransferCurrencyAsync(System.String,System.String,System.String,Org.MetaFab.Model.TransferCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Transfer currency Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="transferCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.CurrenciesApi.TransferCurrencyWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.TransferCurrencyRequest,System.Threading.CancellationToken)">
            <summary>
            Transfer currency Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="transferCurrencyRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="P:Org.MetaFab.Api.CurrenciesApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Org.MetaFab.Api.CurrenciesApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="T:Org.MetaFab.Api.IExchangesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.CreateExchange(System.String,System.String,Org.MetaFab.Model.CreateExchangeRequest)">
            <summary>
            Create exchange
            </summary>
            <remarks>
            Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game's primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createExchangeRequest"></param>
            <returns>CreateExchange200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.CreateExchangeWithHttpInfo(System.String,System.String,Org.MetaFab.Model.CreateExchangeRequest)">
            <summary>
            Create exchange
            </summary>
            <remarks>
            Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game's primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createExchangeRequest"></param>
            <returns>ApiResponse of CreateExchange200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.GetExchangeOffer(System.String,System.String)">
            <summary>
            Get exchange offer
            </summary>
            <remarks>
            Returns a exchange offer object for the provided exchangeOfferId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <returns>ExchangeOffer</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.GetExchangeOfferWithHttpInfo(System.String,System.String)">
            <summary>
            Get exchange offer
            </summary>
            <remarks>
            Returns a exchange offer object for the provided exchangeOfferId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <returns>ApiResponse of ExchangeOffer</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IExchangesApi.GetExchangeOffers(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IExchangesApi.GetExchangeOffersWithHttpInfo(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IExchangesApi.GetExchanges(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IExchangesApi.GetExchangesWithHttpInfo(System.String)" -->
        <member name="M:Org.MetaFab.Api.IExchangesApi.RemoveExchangeOffer(System.String,System.String,System.String,System.String)">
            <summary>
            Remove exchange offer
            </summary>
            <remarks>
            Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.RemoveExchangeOfferWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Remove exchange offer
            </summary>
            <remarks>
            Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.SetExchangeOffer(System.String,System.String,System.String,Org.MetaFab.Model.SetExchangeOfferRequest)">
            <summary>
            Set exchange offer
            </summary>
            <remarks>
            Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setExchangeOfferRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.SetExchangeOfferWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.SetExchangeOfferRequest)">
            <summary>
            Set exchange offer
            </summary>
            <remarks>
            Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setExchangeOfferRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.UseExchangeOffer(System.String,System.String,System.String,System.String)">
            <summary>
            Use exchange offer
            </summary>
            <remarks>
            Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.UseExchangeOfferWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Use exchange offer
            </summary>
            <remarks>
            Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.WithdrawFromExchange(System.String,System.String,System.String,Org.MetaFab.Model.WithdrawFromExchangeRequest)">
            <summary>
            Withdraw from exchange
            </summary>
            <remarks>
            Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="withdrawFromExchangeRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.WithdrawFromExchangeWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.WithdrawFromExchangeRequest)">
            <summary>
            Withdraw from exchange
            </summary>
            <remarks>
            Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="withdrawFromExchangeRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.CreateExchangeAsync(System.String,System.String,Org.MetaFab.Model.CreateExchangeRequest,System.Threading.CancellationToken)">
            <summary>
            Create exchange
            </summary>
            <remarks>
            Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game's primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createExchangeRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of CreateExchange200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.CreateExchangeWithHttpInfoAsync(System.String,System.String,Org.MetaFab.Model.CreateExchangeRequest,System.Threading.CancellationToken)">
            <summary>
            Create exchange
            </summary>
            <remarks>
            Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game's primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createExchangeRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (CreateExchange200Response)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.GetExchangeOfferAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get exchange offer
            </summary>
            <remarks>
            Returns a exchange offer object for the provided exchangeOfferId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ExchangeOffer</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.GetExchangeOfferWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get exchange offer
            </summary>
            <remarks>
            Returns a exchange offer object for the provided exchangeOfferId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (ExchangeOffer)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IExchangesApi.GetExchangeOffersAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.IExchangesApi.GetExchangeOffersWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get exchange offers
            </summary>
            <remarks>
            Returns all exchange offers as an array of exchange offer objects.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (List&lt;ExchangeOffer&gt;)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IExchangesApi.GetExchangesAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.IExchangesApi.GetExchangesWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get exchanges
            </summary>
            <remarks>
            Returns an array of active exchanges for the game associated with the provided `X-Game-Key`.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (List&lt;GetExchanges200ResponseInner&gt;)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.RemoveExchangeOfferAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Remove exchange offer
            </summary>
            <remarks>
            Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.RemoveExchangeOfferWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Remove exchange offer
            </summary>
            <remarks>
            Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.SetExchangeOfferAsync(System.String,System.String,System.String,Org.MetaFab.Model.SetExchangeOfferRequest,System.Threading.CancellationToken)">
            <summary>
            Set exchange offer
            </summary>
            <remarks>
            Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setExchangeOfferRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.SetExchangeOfferWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.SetExchangeOfferRequest,System.Threading.CancellationToken)">
            <summary>
            Set exchange offer
            </summary>
            <remarks>
            Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setExchangeOfferRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.UseExchangeOfferAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Use exchange offer
            </summary>
            <remarks>
            Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.UseExchangeOfferWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Use exchange offer
            </summary>
            <remarks>
            Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.WithdrawFromExchangeAsync(System.String,System.String,System.String,Org.MetaFab.Model.WithdrawFromExchangeRequest,System.Threading.CancellationToken)">
            <summary>
            Withdraw from exchange
            </summary>
            <remarks>
            Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="withdrawFromExchangeRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IExchangesApi.WithdrawFromExchangeWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.WithdrawFromExchangeRequest,System.Threading.CancellationToken)">
            <summary>
            Withdraw from exchange
            </summary>
            <remarks>
            Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="withdrawFromExchangeRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="T:Org.MetaFab.Api.ExchangesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.ExchangesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.ExchangesApi"/> class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.#ctor(Org.MetaFab.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.ExchangesApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.CreateExchange(System.String,System.String,Org.MetaFab.Model.CreateExchangeRequest)">
            <summary>
            Create exchange Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game's primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createExchangeRequest"></param>
            <returns>CreateExchange200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.CreateExchangeWithHttpInfo(System.String,System.String,Org.MetaFab.Model.CreateExchangeRequest)">
            <summary>
            Create exchange Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game's primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createExchangeRequest"></param>
            <returns>ApiResponse of CreateExchange200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.CreateExchangeAsync(System.String,System.String,Org.MetaFab.Model.CreateExchangeRequest,System.Threading.CancellationToken)">
            <summary>
            Create exchange Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game's primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createExchangeRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of CreateExchange200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.CreateExchangeWithHttpInfoAsync(System.String,System.String,Org.MetaFab.Model.CreateExchangeRequest,System.Threading.CancellationToken)">
            <summary>
            Create exchange Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game's primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createExchangeRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (CreateExchange200Response)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.GetExchangeOffer(System.String,System.String)">
            <summary>
            Get exchange offer Returns a exchange offer object for the provided exchangeOfferId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <returns>ExchangeOffer</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.GetExchangeOfferWithHttpInfo(System.String,System.String)">
            <summary>
            Get exchange offer Returns a exchange offer object for the provided exchangeOfferId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <returns>ApiResponse of ExchangeOffer</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.GetExchangeOfferAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get exchange offer Returns a exchange offer object for the provided exchangeOfferId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ExchangeOffer</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.GetExchangeOfferWithHttpInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get exchange offer Returns a exchange offer object for the provided exchangeOfferId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (ExchangeOffer)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ExchangesApi.GetExchangeOffers(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ExchangesApi.GetExchangeOffersWithHttpInfo(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ExchangesApi.GetExchangeOffersAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.ExchangesApi.GetExchangeOffersWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get exchange offers Returns all exchange offers as an array of exchange offer objects.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (List&lt;ExchangeOffer&gt;)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ExchangesApi.GetExchanges(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ExchangesApi.GetExchangesWithHttpInfo(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ExchangesApi.GetExchangesAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.ExchangesApi.GetExchangesWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get exchanges Returns an array of active exchanges for the game associated with the provided `X-Game-Key`.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (List&lt;GetExchanges200ResponseInner&gt;)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.RemoveExchangeOffer(System.String,System.String,System.String,System.String)">
            <summary>
            Remove exchange offer Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.RemoveExchangeOfferWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Remove exchange offer Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.RemoveExchangeOfferAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Remove exchange offer Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.RemoveExchangeOfferWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Remove exchange offer Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.SetExchangeOffer(System.String,System.String,System.String,Org.MetaFab.Model.SetExchangeOfferRequest)">
            <summary>
            Set exchange offer Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setExchangeOfferRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.SetExchangeOfferWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.SetExchangeOfferRequest)">
            <summary>
            Set exchange offer Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setExchangeOfferRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.SetExchangeOfferAsync(System.String,System.String,System.String,Org.MetaFab.Model.SetExchangeOfferRequest,System.Threading.CancellationToken)">
            <summary>
            Set exchange offer Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setExchangeOfferRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.SetExchangeOfferWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.SetExchangeOfferRequest,System.Threading.CancellationToken)">
            <summary>
            Set exchange offer Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setExchangeOfferRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.UseExchangeOffer(System.String,System.String,System.String,System.String)">
            <summary>
            Use exchange offer Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.UseExchangeOfferWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Use exchange offer Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.UseExchangeOfferAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Use exchange offer Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.UseExchangeOfferWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Use exchange offer Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.WithdrawFromExchange(System.String,System.String,System.String,Org.MetaFab.Model.WithdrawFromExchangeRequest)">
            <summary>
            Withdraw from exchange Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="withdrawFromExchangeRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.WithdrawFromExchangeWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.WithdrawFromExchangeRequest)">
            <summary>
            Withdraw from exchange Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="withdrawFromExchangeRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.WithdrawFromExchangeAsync(System.String,System.String,System.String,Org.MetaFab.Model.WithdrawFromExchangeRequest,System.Threading.CancellationToken)">
            <summary>
            Withdraw from exchange Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="withdrawFromExchangeRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ExchangesApi.WithdrawFromExchangeWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.WithdrawFromExchangeRequest,System.Threading.CancellationToken)">
            <summary>
            Withdraw from exchange Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="withdrawFromExchangeRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="P:Org.MetaFab.Api.ExchangesApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Org.MetaFab.Api.ExchangesApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="T:Org.MetaFab.Api.IGamesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Org.MetaFab.Api.IGamesApi.AuthGame">
            <summary>
            Authenticate game
            </summary>
            <remarks>
            Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>AuthGame200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IGamesApi.AuthGameWithHttpInfo">
            <summary>
            Authenticate game
            </summary>
            <remarks>
            Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of AuthGame200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IGamesApi.CreateGame(Org.MetaFab.Model.CreateGameRequest)">
            <summary>
            Create game
            </summary>
            <remarks>
            Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab's services, you must first create a game through this endpoint.  **Game creation is limited during our closed beta. Please contact ArkDev#4501 on Discord to be a part of our beta.**
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createGameRequest"></param>
            <returns>AuthGame200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IGamesApi.CreateGameWithHttpInfo(Org.MetaFab.Model.CreateGameRequest)">
            <summary>
            Create game
            </summary>
            <remarks>
            Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab's services, you must first create a game through this endpoint.  **Game creation is limited during our closed beta. Please contact ArkDev#4501 on Discord to be a part of our beta.**
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createGameRequest"></param>
            <returns>ApiResponse of AuthGame200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IGamesApi.GetGame(System.String)">
            <summary>
            Get game
            </summary>
            <remarks>
            Returns a game object for the provided game id.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="gameId">Any game id within the MetaFab ecosystem.</param>
            <returns>PublicGame</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IGamesApi.GetGameWithHttpInfo(System.String)">
            <summary>
            Get game
            </summary>
            <remarks>
            Returns a game object for the provided game id.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="gameId">Any game id within the MetaFab ecosystem.</param>
            <returns>ApiResponse of PublicGame</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IGamesApi.UpdateGame(System.String,System.String,Org.MetaFab.Model.UpdateGameRequest)">
            <summary>
            Update game
            </summary>
            <remarks>
            Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="gameId">Any game id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="updateGameRequest"></param>
            <returns>GameModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IGamesApi.UpdateGameWithHttpInfo(System.String,System.String,Org.MetaFab.Model.UpdateGameRequest)">
            <summary>
            Update game
            </summary>
            <remarks>
            Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="gameId">Any game id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="updateGameRequest"></param>
            <returns>ApiResponse of GameModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IGamesApi.AuthGameAsync(System.Threading.CancellationToken)">
            <summary>
            Authenticate game
            </summary>
            <remarks>
            Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of AuthGame200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IGamesApi.AuthGameWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Authenticate game
            </summary>
            <remarks>
            Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (AuthGame200Response)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IGamesApi.CreateGameAsync(Org.MetaFab.Model.CreateGameRequest,System.Threading.CancellationToken)">
            <summary>
            Create game
            </summary>
            <remarks>
            Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab's services, you must first create a game through this endpoint.  **Game creation is limited during our closed beta. Please contact ArkDev#4501 on Discord to be a part of our beta.**
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createGameRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of AuthGame200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IGamesApi.CreateGameWithHttpInfoAsync(Org.MetaFab.Model.CreateGameRequest,System.Threading.CancellationToken)">
            <summary>
            Create game
            </summary>
            <remarks>
            Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab's services, you must first create a game through this endpoint.  **Game creation is limited during our closed beta. Please contact ArkDev#4501 on Discord to be a part of our beta.**
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createGameRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (AuthGame200Response)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IGamesApi.GetGameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get game
            </summary>
            <remarks>
            Returns a game object for the provided game id.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="gameId">Any game id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of PublicGame</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IGamesApi.GetGameWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get game
            </summary>
            <remarks>
            Returns a game object for the provided game id.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="gameId">Any game id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (PublicGame)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IGamesApi.UpdateGameAsync(System.String,System.String,Org.MetaFab.Model.UpdateGameRequest,System.Threading.CancellationToken)">
            <summary>
            Update game
            </summary>
            <remarks>
            Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="gameId">Any game id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="updateGameRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of GameModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IGamesApi.UpdateGameWithHttpInfoAsync(System.String,System.String,Org.MetaFab.Model.UpdateGameRequest,System.Threading.CancellationToken)">
            <summary>
            Update game
            </summary>
            <remarks>
            Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="gameId">Any game id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="updateGameRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (GameModel)</returns>
        </member>
        <member name="T:Org.MetaFab.Api.GamesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.GamesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.GamesApi"/> class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.#ctor(Org.MetaFab.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.GamesApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.AuthGame">
            <summary>
            Authenticate game Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>AuthGame200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.AuthGameWithHttpInfo">
            <summary>
            Authenticate game Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of AuthGame200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.AuthGameAsync(System.Threading.CancellationToken)">
            <summary>
            Authenticate game Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of AuthGame200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.AuthGameWithHttpInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Authenticate game Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (AuthGame200Response)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.CreateGame(Org.MetaFab.Model.CreateGameRequest)">
            <summary>
            Create game Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab's services, you must first create a game through this endpoint.  **Game creation is limited during our closed beta. Please contact ArkDev#4501 on Discord to be a part of our beta.**
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createGameRequest"></param>
            <returns>AuthGame200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.CreateGameWithHttpInfo(Org.MetaFab.Model.CreateGameRequest)">
            <summary>
            Create game Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab's services, you must first create a game through this endpoint.  **Game creation is limited during our closed beta. Please contact ArkDev#4501 on Discord to be a part of our beta.**
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createGameRequest"></param>
            <returns>ApiResponse of AuthGame200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.CreateGameAsync(Org.MetaFab.Model.CreateGameRequest,System.Threading.CancellationToken)">
            <summary>
            Create game Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab's services, you must first create a game through this endpoint.  **Game creation is limited during our closed beta. Please contact ArkDev#4501 on Discord to be a part of our beta.**
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createGameRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of AuthGame200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.CreateGameWithHttpInfoAsync(Org.MetaFab.Model.CreateGameRequest,System.Threading.CancellationToken)">
            <summary>
            Create game Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab's services, you must first create a game through this endpoint.  **Game creation is limited during our closed beta. Please contact ArkDev#4501 on Discord to be a part of our beta.**
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createGameRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (AuthGame200Response)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.GetGame(System.String)">
            <summary>
            Get game Returns a game object for the provided game id.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="gameId">Any game id within the MetaFab ecosystem.</param>
            <returns>PublicGame</returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.GetGameWithHttpInfo(System.String)">
            <summary>
            Get game Returns a game object for the provided game id.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="gameId">Any game id within the MetaFab ecosystem.</param>
            <returns>ApiResponse of PublicGame</returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.GetGameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get game Returns a game object for the provided game id.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="gameId">Any game id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of PublicGame</returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.GetGameWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get game Returns a game object for the provided game id.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="gameId">Any game id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (PublicGame)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.UpdateGame(System.String,System.String,Org.MetaFab.Model.UpdateGameRequest)">
            <summary>
            Update game Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="gameId">Any game id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="updateGameRequest"></param>
            <returns>GameModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.UpdateGameWithHttpInfo(System.String,System.String,Org.MetaFab.Model.UpdateGameRequest)">
            <summary>
            Update game Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="gameId">Any game id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="updateGameRequest"></param>
            <returns>ApiResponse of GameModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.UpdateGameAsync(System.String,System.String,Org.MetaFab.Model.UpdateGameRequest,System.Threading.CancellationToken)">
            <summary>
            Update game Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="gameId">Any game id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="updateGameRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of GameModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.GamesApi.UpdateGameWithHttpInfoAsync(System.String,System.String,Org.MetaFab.Model.UpdateGameRequest,System.Threading.CancellationToken)">
            <summary>
            Update game Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="gameId">Any game id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="updateGameRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (GameModel)</returns>
        </member>
        <member name="P:Org.MetaFab.Api.GamesApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Org.MetaFab.Api.GamesApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="T:Org.MetaFab.Api.IItemsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.BatchMintCollectionItems(System.String,System.String,System.String,Org.MetaFab.Model.BatchMintCollectionItemsRequest)">
            <summary>
            Batch mint collection items
            </summary>
            <remarks>
            Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="batchMintCollectionItemsRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.BatchMintCollectionItemsWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.BatchMintCollectionItemsRequest)">
            <summary>
            Batch mint collection items
            </summary>
            <remarks>
            Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="batchMintCollectionItemsRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.BatchTransferCollectionItems(System.String,System.String,System.String,Org.MetaFab.Model.BatchTransferCollectionItemsRequest)">
            <summary>
            Batch transfer collection items
            </summary>
            <remarks>
            Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="batchTransferCollectionItemsRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.BatchTransferCollectionItemsWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.BatchTransferCollectionItemsRequest)">
            <summary>
            Batch transfer collection items
            </summary>
            <remarks>
            Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="batchTransferCollectionItemsRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.BurnCollectionItem(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.BurnCollectionItemRequest)">
            <summary>
            Burn collection item
            </summary>
            <remarks>
            Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="burnCollectionItemRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.BurnCollectionItemWithHttpInfo(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.BurnCollectionItemRequest)">
            <summary>
            Burn collection item
            </summary>
            <remarks>
            Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="burnCollectionItemRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.CreateCollection(System.String,System.String,Org.MetaFab.Model.CreateCollectionRequest)">
            <summary>
            Create collection
            </summary>
            <remarks>
            Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCollectionRequest"></param>
            <returns>CreateCollection200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.CreateCollectionWithHttpInfo(System.String,System.String,Org.MetaFab.Model.CreateCollectionRequest)">
            <summary>
            Create collection
            </summary>
            <remarks>
            Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCollectionRequest"></param>
            <returns>ApiResponse of CreateCollection200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.CreateCollectionItem(System.String,System.String,System.String,Org.MetaFab.Model.CreateCollectionItemRequest)">
            <summary>
            Create collection item
            </summary>
            <remarks>
            Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCollectionItemRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.CreateCollectionItemWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.CreateCollectionItemRequest)">
            <summary>
            Create collection item
            </summary>
            <remarks>
            Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCollectionItemRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionApproval(System.String,System.String,System.String,System.String)">
            <summary>
            Get collection approval
            </summary>
            <remarks>
            Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="operatorAddress">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>bool</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionApprovalWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Get collection approval
            </summary>
            <remarks>
            Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="operatorAddress">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>ApiResponse of bool</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItem(System.String,System.Decimal)">
            <summary>
            Get collection item
            </summary>
            <remarks>
            Returns a metadata object for the provided collectionItemId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <returns>Object</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemWithHttpInfo(System.String,System.Decimal)">
            <summary>
            Get collection item
            </summary>
            <remarks>
            Returns a metadata object for the provided collectionItemId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <returns>ApiResponse of Object</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemBalance(System.String,System.Decimal,System.String,System.String)">
            <summary>
            Get collection item balance
            </summary>
            <remarks>
            Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemBalanceWithHttpInfo(System.String,System.Decimal,System.String,System.String)">
            <summary>
            Get collection item balance
            </summary>
            <remarks>
            Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>ApiResponse of decimal</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IItemsApi.GetCollectionItemBalances(System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IItemsApi.GetCollectionItemBalancesWithHttpInfo(System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IItemsApi.GetCollectionItemSupplies(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IItemsApi.GetCollectionItemSuppliesWithHttpInfo(System.String)" -->
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemSupply(System.String,System.Decimal,System.String,System.String)">
            <summary>
            Get collection item supply
            </summary>
            <remarks>
            Returns the current circulating supply of the provided collectionItemId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemSupplyWithHttpInfo(System.String,System.Decimal,System.String,System.String)">
            <summary>
            Get collection item supply
            </summary>
            <remarks>
            Returns the current circulating supply of the provided collectionItemId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>ApiResponse of decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemTimelock(System.String,System.Decimal)">
            <summary>
            Get collection item timelock
            </summary>
            <remarks>
            Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <returns>decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemTimelockWithHttpInfo(System.String,System.Decimal)">
            <summary>
            Get collection item timelock
            </summary>
            <remarks>
            Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <returns>ApiResponse of decimal</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IItemsApi.GetCollectionItems(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IItemsApi.GetCollectionItemsWithHttpInfo(System.String)" -->
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionRole(System.String,System.String,System.String,System.String)">
            <summary>
            Get collection role
            </summary>
            <remarks>
            Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>bool</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionRoleWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Get collection role
            </summary>
            <remarks>
            Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>ApiResponse of bool</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IItemsApi.GetCollections(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IItemsApi.GetCollectionsWithHttpInfo(System.String)" -->
        <member name="M:Org.MetaFab.Api.IItemsApi.GrantCollectionRole(System.String,System.String,System.String,Org.MetaFab.Model.GrantCollectionRoleRequest)">
            <summary>
            Grant collection role
            </summary>
            <remarks>
            Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="grantCollectionRoleRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GrantCollectionRoleWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.GrantCollectionRoleRequest)">
            <summary>
            Grant collection role
            </summary>
            <remarks>
            Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="grantCollectionRoleRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.MintCollectionItem(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.MintCollectionItemRequest)">
            <summary>
            Mint collection item
            </summary>
            <remarks>
            Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="mintCollectionItemRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.MintCollectionItemWithHttpInfo(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.MintCollectionItemRequest)">
            <summary>
            Mint collection item
            </summary>
            <remarks>
            Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="mintCollectionItemRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.RevokeCollectionRole(System.String,System.String,System.String,Org.MetaFab.Model.RevokeCollectionRoleRequest)">
            <summary>
            Revoke collection role
            </summary>
            <remarks>
            Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="revokeCollectionRoleRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.RevokeCollectionRoleWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.RevokeCollectionRoleRequest)">
            <summary>
            Revoke collection role
            </summary>
            <remarks>
            Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="revokeCollectionRoleRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.SetCollectionApproval(System.String,System.String,System.String,Org.MetaFab.Model.SetCollectionApprovalRequest)">
            <summary>
            Set collection approval
            </summary>
            <remarks>
            Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="setCollectionApprovalRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.SetCollectionApprovalWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.SetCollectionApprovalRequest)">
            <summary>
            Set collection approval
            </summary>
            <remarks>
            Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="setCollectionApprovalRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.SetCollectionItemTimelock(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.SetCollectionItemTimelockRequest)">
            <summary>
            Set collection item timelock
            </summary>
            <remarks>
            Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setCollectionItemTimelockRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.SetCollectionItemTimelockWithHttpInfo(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.SetCollectionItemTimelockRequest)">
            <summary>
            Set collection item timelock
            </summary>
            <remarks>
            Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setCollectionItemTimelockRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.TransferCollectionItem(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.TransferCollectionItemRequest)">
            <summary>
            Transfer collection item
            </summary>
            <remarks>
            Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="transferCollectionItemRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.TransferCollectionItemWithHttpInfo(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.TransferCollectionItemRequest)">
            <summary>
            Transfer collection item
            </summary>
            <remarks>
            Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="transferCollectionItemRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.BatchMintCollectionItemsAsync(System.String,System.String,System.String,Org.MetaFab.Model.BatchMintCollectionItemsRequest,System.Threading.CancellationToken)">
            <summary>
            Batch mint collection items
            </summary>
            <remarks>
            Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="batchMintCollectionItemsRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.BatchMintCollectionItemsWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.BatchMintCollectionItemsRequest,System.Threading.CancellationToken)">
            <summary>
            Batch mint collection items
            </summary>
            <remarks>
            Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="batchMintCollectionItemsRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.BatchTransferCollectionItemsAsync(System.String,System.String,System.String,Org.MetaFab.Model.BatchTransferCollectionItemsRequest,System.Threading.CancellationToken)">
            <summary>
            Batch transfer collection items
            </summary>
            <remarks>
            Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="batchTransferCollectionItemsRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.BatchTransferCollectionItemsWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.BatchTransferCollectionItemsRequest,System.Threading.CancellationToken)">
            <summary>
            Batch transfer collection items
            </summary>
            <remarks>
            Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="batchTransferCollectionItemsRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.BurnCollectionItemAsync(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.BurnCollectionItemRequest,System.Threading.CancellationToken)">
            <summary>
            Burn collection item
            </summary>
            <remarks>
            Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="burnCollectionItemRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.BurnCollectionItemWithHttpInfoAsync(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.BurnCollectionItemRequest,System.Threading.CancellationToken)">
            <summary>
            Burn collection item
            </summary>
            <remarks>
            Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="burnCollectionItemRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.CreateCollectionAsync(System.String,System.String,Org.MetaFab.Model.CreateCollectionRequest,System.Threading.CancellationToken)">
            <summary>
            Create collection
            </summary>
            <remarks>
            Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCollectionRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of CreateCollection200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.CreateCollectionWithHttpInfoAsync(System.String,System.String,Org.MetaFab.Model.CreateCollectionRequest,System.Threading.CancellationToken)">
            <summary>
            Create collection
            </summary>
            <remarks>
            Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCollectionRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (CreateCollection200Response)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.CreateCollectionItemAsync(System.String,System.String,System.String,Org.MetaFab.Model.CreateCollectionItemRequest,System.Threading.CancellationToken)">
            <summary>
            Create collection item
            </summary>
            <remarks>
            Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCollectionItemRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.CreateCollectionItemWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.CreateCollectionItemRequest,System.Threading.CancellationToken)">
            <summary>
            Create collection item
            </summary>
            <remarks>
            Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCollectionItemRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionApprovalAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection approval
            </summary>
            <remarks>
            Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="operatorAddress">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of bool</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionApprovalWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection approval
            </summary>
            <remarks>
            Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="operatorAddress">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (bool)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemAsync(System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Get collection item
            </summary>
            <remarks>
            Returns a metadata object for the provided collectionItemId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of Object</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemWithHttpInfoAsync(System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Get collection item
            </summary>
            <remarks>
            Returns a metadata object for the provided collectionItemId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (Object)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemBalanceAsync(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection item balance
            </summary>
            <remarks>
            Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemBalanceWithHttpInfoAsync(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection item balance
            </summary>
            <remarks>
            Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (decimal)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IItemsApi.GetCollectionItemBalancesAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemBalancesWithHttpInfoAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection item balances
            </summary>
            <remarks>
            Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (Dictionary&lt;string, decimal&gt;)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IItemsApi.GetCollectionItemSuppliesAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemSuppliesWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection item supplies
            </summary>
            <remarks>
            Returns the currency circulating supply of all collection items.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (Dictionary&lt;string, decimal&gt;)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemSupplyAsync(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection item supply
            </summary>
            <remarks>
            Returns the current circulating supply of the provided collectionItemId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemSupplyWithHttpInfoAsync(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection item supply
            </summary>
            <remarks>
            Returns the current circulating supply of the provided collectionItemId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (decimal)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemTimelockAsync(System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Get collection item timelock
            </summary>
            <remarks>
            Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemTimelockWithHttpInfoAsync(System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Get collection item timelock
            </summary>
            <remarks>
            Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (decimal)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IItemsApi.GetCollectionItemsAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionItemsWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection items
            </summary>
            <remarks>
            Returns all collection items as an array of metadata objects.  Please note that ONLY items that have had at least 1 quantity minted will be returned. If you've created an item that has not been minted yet, it will not be returned in the array response.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionRoleAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection role
            </summary>
            <remarks>
            Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of bool</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionRoleWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection role
            </summary>
            <remarks>
            Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (bool)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IItemsApi.GetCollectionsAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.IItemsApi.GetCollectionsWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get collections
            </summary>
            <remarks>
            Returns an array of active item collections for the game associated with the provided `X-Game-Key`.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (List&lt;GetCollections200ResponseInner&gt;)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GrantCollectionRoleAsync(System.String,System.String,System.String,Org.MetaFab.Model.GrantCollectionRoleRequest,System.Threading.CancellationToken)">
            <summary>
            Grant collection role
            </summary>
            <remarks>
            Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="grantCollectionRoleRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.GrantCollectionRoleWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.GrantCollectionRoleRequest,System.Threading.CancellationToken)">
            <summary>
            Grant collection role
            </summary>
            <remarks>
            Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="grantCollectionRoleRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.MintCollectionItemAsync(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.MintCollectionItemRequest,System.Threading.CancellationToken)">
            <summary>
            Mint collection item
            </summary>
            <remarks>
            Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="mintCollectionItemRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.MintCollectionItemWithHttpInfoAsync(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.MintCollectionItemRequest,System.Threading.CancellationToken)">
            <summary>
            Mint collection item
            </summary>
            <remarks>
            Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="mintCollectionItemRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.RevokeCollectionRoleAsync(System.String,System.String,System.String,Org.MetaFab.Model.RevokeCollectionRoleRequest,System.Threading.CancellationToken)">
            <summary>
            Revoke collection role
            </summary>
            <remarks>
            Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="revokeCollectionRoleRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.RevokeCollectionRoleWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.RevokeCollectionRoleRequest,System.Threading.CancellationToken)">
            <summary>
            Revoke collection role
            </summary>
            <remarks>
            Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="revokeCollectionRoleRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.SetCollectionApprovalAsync(System.String,System.String,System.String,Org.MetaFab.Model.SetCollectionApprovalRequest,System.Threading.CancellationToken)">
            <summary>
            Set collection approval
            </summary>
            <remarks>
            Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="setCollectionApprovalRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.SetCollectionApprovalWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.SetCollectionApprovalRequest,System.Threading.CancellationToken)">
            <summary>
            Set collection approval
            </summary>
            <remarks>
            Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="setCollectionApprovalRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.SetCollectionItemTimelockAsync(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.SetCollectionItemTimelockRequest,System.Threading.CancellationToken)">
            <summary>
            Set collection item timelock
            </summary>
            <remarks>
            Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setCollectionItemTimelockRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.SetCollectionItemTimelockWithHttpInfoAsync(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.SetCollectionItemTimelockRequest,System.Threading.CancellationToken)">
            <summary>
            Set collection item timelock
            </summary>
            <remarks>
            Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setCollectionItemTimelockRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.TransferCollectionItemAsync(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.TransferCollectionItemRequest,System.Threading.CancellationToken)">
            <summary>
            Transfer collection item
            </summary>
            <remarks>
            Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="transferCollectionItemRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IItemsApi.TransferCollectionItemWithHttpInfoAsync(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.TransferCollectionItemRequest,System.Threading.CancellationToken)">
            <summary>
            Transfer collection item
            </summary>
            <remarks>
            Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="transferCollectionItemRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="T:Org.MetaFab.Api.ItemsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.ItemsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.ItemsApi"/> class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.#ctor(Org.MetaFab.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.ItemsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.BatchMintCollectionItems(System.String,System.String,System.String,Org.MetaFab.Model.BatchMintCollectionItemsRequest)">
            <summary>
            Batch mint collection items Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="batchMintCollectionItemsRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.BatchMintCollectionItemsWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.BatchMintCollectionItemsRequest)">
            <summary>
            Batch mint collection items Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="batchMintCollectionItemsRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.BatchMintCollectionItemsAsync(System.String,System.String,System.String,Org.MetaFab.Model.BatchMintCollectionItemsRequest,System.Threading.CancellationToken)">
            <summary>
            Batch mint collection items Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="batchMintCollectionItemsRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.BatchMintCollectionItemsWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.BatchMintCollectionItemsRequest,System.Threading.CancellationToken)">
            <summary>
            Batch mint collection items Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="batchMintCollectionItemsRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.BatchTransferCollectionItems(System.String,System.String,System.String,Org.MetaFab.Model.BatchTransferCollectionItemsRequest)">
            <summary>
            Batch transfer collection items Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="batchTransferCollectionItemsRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.BatchTransferCollectionItemsWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.BatchTransferCollectionItemsRequest)">
            <summary>
            Batch transfer collection items Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="batchTransferCollectionItemsRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.BatchTransferCollectionItemsAsync(System.String,System.String,System.String,Org.MetaFab.Model.BatchTransferCollectionItemsRequest,System.Threading.CancellationToken)">
            <summary>
            Batch transfer collection items Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="batchTransferCollectionItemsRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.BatchTransferCollectionItemsWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.BatchTransferCollectionItemsRequest,System.Threading.CancellationToken)">
            <summary>
            Batch transfer collection items Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="batchTransferCollectionItemsRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.BurnCollectionItem(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.BurnCollectionItemRequest)">
            <summary>
            Burn collection item Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="burnCollectionItemRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.BurnCollectionItemWithHttpInfo(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.BurnCollectionItemRequest)">
            <summary>
            Burn collection item Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="burnCollectionItemRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.BurnCollectionItemAsync(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.BurnCollectionItemRequest,System.Threading.CancellationToken)">
            <summary>
            Burn collection item Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="burnCollectionItemRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.BurnCollectionItemWithHttpInfoAsync(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.BurnCollectionItemRequest,System.Threading.CancellationToken)">
            <summary>
            Burn collection item Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="burnCollectionItemRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.CreateCollection(System.String,System.String,Org.MetaFab.Model.CreateCollectionRequest)">
            <summary>
            Create collection Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCollectionRequest"></param>
            <returns>CreateCollection200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.CreateCollectionWithHttpInfo(System.String,System.String,Org.MetaFab.Model.CreateCollectionRequest)">
            <summary>
            Create collection Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCollectionRequest"></param>
            <returns>ApiResponse of CreateCollection200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.CreateCollectionAsync(System.String,System.String,Org.MetaFab.Model.CreateCollectionRequest,System.Threading.CancellationToken)">
            <summary>
            Create collection Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCollectionRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of CreateCollection200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.CreateCollectionWithHttpInfoAsync(System.String,System.String,Org.MetaFab.Model.CreateCollectionRequest,System.Threading.CancellationToken)">
            <summary>
            Create collection Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCollectionRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (CreateCollection200Response)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.CreateCollectionItem(System.String,System.String,System.String,Org.MetaFab.Model.CreateCollectionItemRequest)">
            <summary>
            Create collection item Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCollectionItemRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.CreateCollectionItemWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.CreateCollectionItemRequest)">
            <summary>
            Create collection item Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCollectionItemRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.CreateCollectionItemAsync(System.String,System.String,System.String,Org.MetaFab.Model.CreateCollectionItemRequest,System.Threading.CancellationToken)">
            <summary>
            Create collection item Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCollectionItemRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.CreateCollectionItemWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.CreateCollectionItemRequest,System.Threading.CancellationToken)">
            <summary>
            Create collection item Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="createCollectionItemRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionApproval(System.String,System.String,System.String,System.String)">
            <summary>
            Get collection approval Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="operatorAddress">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>bool</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionApprovalWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Get collection approval Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="operatorAddress">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>ApiResponse of bool</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionApprovalAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection approval Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="operatorAddress">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of bool</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionApprovalWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection approval Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="operatorAddress">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (bool)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItem(System.String,System.Decimal)">
            <summary>
            Get collection item Returns a metadata object for the provided collectionItemId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <returns>Object</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemWithHttpInfo(System.String,System.Decimal)">
            <summary>
            Get collection item Returns a metadata object for the provided collectionItemId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <returns>ApiResponse of Object</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemAsync(System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Get collection item Returns a metadata object for the provided collectionItemId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of Object</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemWithHttpInfoAsync(System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Get collection item Returns a metadata object for the provided collectionItemId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (Object)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemBalance(System.String,System.Decimal,System.String,System.String)">
            <summary>
            Get collection item balance Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemBalanceWithHttpInfo(System.String,System.Decimal,System.String,System.String)">
            <summary>
            Get collection item balance Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>ApiResponse of decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemBalanceAsync(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection item balance Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemBalanceWithHttpInfoAsync(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection item balance Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (decimal)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ItemsApi.GetCollectionItemBalances(System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ItemsApi.GetCollectionItemBalancesWithHttpInfo(System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ItemsApi.GetCollectionItemBalancesAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemBalancesWithHttpInfoAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection item balances Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (Dictionary&lt;string, decimal&gt;)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ItemsApi.GetCollectionItemSupplies(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ItemsApi.GetCollectionItemSuppliesWithHttpInfo(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ItemsApi.GetCollectionItemSuppliesAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemSuppliesWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection item supplies Returns the currency circulating supply of all collection items.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (Dictionary&lt;string, decimal&gt;)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemSupply(System.String,System.Decimal,System.String,System.String)">
            <summary>
            Get collection item supply Returns the current circulating supply of the provided collectionItemId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemSupplyWithHttpInfo(System.String,System.Decimal,System.String,System.String)">
            <summary>
            Get collection item supply Returns the current circulating supply of the provided collectionItemId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>ApiResponse of decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemSupplyAsync(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection item supply Returns the current circulating supply of the provided collectionItemId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemSupplyWithHttpInfoAsync(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection item supply Returns the current circulating supply of the provided collectionItemId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (decimal)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemTimelock(System.String,System.Decimal)">
            <summary>
            Get collection item timelock Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <returns>decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemTimelockWithHttpInfo(System.String,System.Decimal)">
            <summary>
            Get collection item timelock Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <returns>ApiResponse of decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemTimelockAsync(System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Get collection item timelock Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of decimal</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemTimelockWithHttpInfoAsync(System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Get collection item timelock Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (decimal)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ItemsApi.GetCollectionItems(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ItemsApi.GetCollectionItemsWithHttpInfo(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ItemsApi.GetCollectionItemsAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionItemsWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection items Returns all collection items as an array of metadata objects.  Please note that ONLY items that have had at least 1 quantity minted will be returned. If you've created an item that has not been minted yet, it will not be returned in the array response.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionRole(System.String,System.String,System.String,System.String)">
            <summary>
            Get collection role Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>bool</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionRoleWithHttpInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Get collection role Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <returns>ApiResponse of bool</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionRoleAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection role Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of bool</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionRoleWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get collection role Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`</param>
            <param name="address">A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`. (optional)</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (bool)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ItemsApi.GetCollections(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ItemsApi.GetCollectionsWithHttpInfo(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.ItemsApi.GetCollectionsAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.ItemsApi.GetCollectionsWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get collections Returns an array of active item collections for the game associated with the provided `X-Game-Key`.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (List&lt;GetCollections200ResponseInner&gt;)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GrantCollectionRole(System.String,System.String,System.String,Org.MetaFab.Model.GrantCollectionRoleRequest)">
            <summary>
            Grant collection role Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="grantCollectionRoleRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GrantCollectionRoleWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.GrantCollectionRoleRequest)">
            <summary>
            Grant collection role Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="grantCollectionRoleRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GrantCollectionRoleAsync(System.String,System.String,System.String,Org.MetaFab.Model.GrantCollectionRoleRequest,System.Threading.CancellationToken)">
            <summary>
            Grant collection role Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="grantCollectionRoleRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.GrantCollectionRoleWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.GrantCollectionRoleRequest,System.Threading.CancellationToken)">
            <summary>
            Grant collection role Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="grantCollectionRoleRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.MintCollectionItem(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.MintCollectionItemRequest)">
            <summary>
            Mint collection item Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="mintCollectionItemRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.MintCollectionItemWithHttpInfo(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.MintCollectionItemRequest)">
            <summary>
            Mint collection item Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="mintCollectionItemRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.MintCollectionItemAsync(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.MintCollectionItemRequest,System.Threading.CancellationToken)">
            <summary>
            Mint collection item Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="mintCollectionItemRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.MintCollectionItemWithHttpInfoAsync(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.MintCollectionItemRequest,System.Threading.CancellationToken)">
            <summary>
            Mint collection item Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="mintCollectionItemRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.RevokeCollectionRole(System.String,System.String,System.String,Org.MetaFab.Model.RevokeCollectionRoleRequest)">
            <summary>
            Revoke collection role Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="revokeCollectionRoleRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.RevokeCollectionRoleWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.RevokeCollectionRoleRequest)">
            <summary>
            Revoke collection role Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="revokeCollectionRoleRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.RevokeCollectionRoleAsync(System.String,System.String,System.String,Org.MetaFab.Model.RevokeCollectionRoleRequest,System.Threading.CancellationToken)">
            <summary>
            Revoke collection role Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="revokeCollectionRoleRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.RevokeCollectionRoleWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.RevokeCollectionRoleRequest,System.Threading.CancellationToken)">
            <summary>
            Revoke collection role Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="revokeCollectionRoleRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.SetCollectionApproval(System.String,System.String,System.String,Org.MetaFab.Model.SetCollectionApprovalRequest)">
            <summary>
            Set collection approval Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="setCollectionApprovalRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.SetCollectionApprovalWithHttpInfo(System.String,System.String,System.String,Org.MetaFab.Model.SetCollectionApprovalRequest)">
            <summary>
            Set collection approval Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="setCollectionApprovalRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.SetCollectionApprovalAsync(System.String,System.String,System.String,Org.MetaFab.Model.SetCollectionApprovalRequest,System.Threading.CancellationToken)">
            <summary>
            Set collection approval Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="setCollectionApprovalRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.SetCollectionApprovalWithHttpInfoAsync(System.String,System.String,System.String,Org.MetaFab.Model.SetCollectionApprovalRequest,System.Threading.CancellationToken)">
            <summary>
            Set collection approval Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="setCollectionApprovalRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.SetCollectionItemTimelock(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.SetCollectionItemTimelockRequest)">
            <summary>
            Set collection item timelock Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setCollectionItemTimelockRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.SetCollectionItemTimelockWithHttpInfo(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.SetCollectionItemTimelockRequest)">
            <summary>
            Set collection item timelock Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setCollectionItemTimelockRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.SetCollectionItemTimelockAsync(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.SetCollectionItemTimelockRequest,System.Threading.CancellationToken)">
            <summary>
            Set collection item timelock Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setCollectionItemTimelockRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.SetCollectionItemTimelockWithHttpInfoAsync(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.SetCollectionItemTimelockRequest,System.Threading.CancellationToken)">
            <summary>
            Set collection item timelock Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
            <param name="setCollectionItemTimelockRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.TransferCollectionItem(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.TransferCollectionItemRequest)">
            <summary>
            Transfer collection item Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="transferCollectionItemRequest"></param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.TransferCollectionItemWithHttpInfo(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.TransferCollectionItemRequest)">
            <summary>
            Transfer collection item Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="transferCollectionItemRequest"></param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.TransferCollectionItemAsync(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.TransferCollectionItemRequest,System.Threading.CancellationToken)">
            <summary>
            Transfer collection item Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="transferCollectionItemRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ItemsApi.TransferCollectionItemWithHttpInfoAsync(System.String,System.Decimal,System.String,System.String,Org.MetaFab.Model.TransferCollectionItemRequest,System.Threading.CancellationToken)">
            <summary>
            Transfer collection item Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
            <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
            <param name="transferCollectionItemRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="P:Org.MetaFab.Api.ItemsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Org.MetaFab.Api.ItemsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="T:Org.MetaFab.Api.IPlayersApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.AuthPlayer(System.String)">
            <summary>
            Authenticate player
            </summary>
            <remarks>
            Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <returns>AuthPlayer200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.AuthPlayerWithHttpInfo(System.String)">
            <summary>
            Authenticate player
            </summary>
            <remarks>
            Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <returns>ApiResponse of AuthPlayer200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.CreatePlayer(System.String,Org.MetaFab.Model.CreatePlayerRequest)">
            <summary>
            Create player
            </summary>
            <remarks>
            Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="createPlayerRequest"></param>
            <returns>AuthPlayer200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.CreatePlayerWithHttpInfo(System.String,Org.MetaFab.Model.CreatePlayerRequest)">
            <summary>
            Create player
            </summary>
            <remarks>
            Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="createPlayerRequest"></param>
            <returns>ApiResponse of AuthPlayer200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.GetPlayer(System.String)">
            <summary>
            Get player
            </summary>
            <remarks>
            Returns a player object for the provided player id.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <returns>PublicPlayer</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.GetPlayerWithHttpInfo(System.String)">
            <summary>
            Get player
            </summary>
            <remarks>
            Returns a player object for the provided player id.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <returns>ApiResponse of PublicPlayer</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.GetPlayerData(System.String)">
            <summary>
            Get player data
            </summary>
            <remarks>
            Returns the latest public and protected data as an object for the provided playerId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <returns>GetPlayerData200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.GetPlayerDataWithHttpInfo(System.String)">
            <summary>
            Get player data
            </summary>
            <remarks>
            Returns the latest public and protected data as an object for the provided playerId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <returns>ApiResponse of GetPlayerData200Response</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IPlayersApi.GetPlayers(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IPlayersApi.GetPlayersWithHttpInfo(System.String)" -->
        <member name="M:Org.MetaFab.Api.IPlayersApi.SetPlayerData(System.String,System.String,Org.MetaFab.Model.SetPlayerDataRequest)">
            <summary>
            Set player data
            </summary>
            <remarks>
            Creates or updates public and/or protected data for the provided playerId. Data updates are performed using deep merging. This means that when you update any top level or nested properties specific to player public or protected data, you only need to include the properties you are making changes to. Any existing properties not included in request body arguments will be retained on the player data object.  Please note, When writing an array type for a player, arrays do not follow the deep merge approach. If you add or remove an item from an array, the entire array must be passed as an argument when updating the related property for player public or protected data.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="setPlayerDataRequest"></param>
            <returns>GetPlayerData200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.SetPlayerDataWithHttpInfo(System.String,System.String,Org.MetaFab.Model.SetPlayerDataRequest)">
            <summary>
            Set player data
            </summary>
            <remarks>
            Creates or updates public and/or protected data for the provided playerId. Data updates are performed using deep merging. This means that when you update any top level or nested properties specific to player public or protected data, you only need to include the properties you are making changes to. Any existing properties not included in request body arguments will be retained on the player data object.  Please note, When writing an array type for a player, arrays do not follow the deep merge approach. If you add or remove an item from an array, the entire array must be passed as an argument when updating the related property for player public or protected data.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="setPlayerDataRequest"></param>
            <returns>ApiResponse of GetPlayerData200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.UpdatePlayer(System.String,System.String,Org.MetaFab.Model.UpdatePlayerRequest)">
            <summary>
            Update player
            </summary>
            <remarks>
            Update various fields specific to a player. Such as changing its password and resetting its access token.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `accessToken` of the authenticating player.</param>
            <param name="updatePlayerRequest"></param>
            <returns>PlayerModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.UpdatePlayerWithHttpInfo(System.String,System.String,Org.MetaFab.Model.UpdatePlayerRequest)">
            <summary>
            Update player
            </summary>
            <remarks>
            Update various fields specific to a player. Such as changing its password and resetting its access token.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `accessToken` of the authenticating player.</param>
            <param name="updatePlayerRequest"></param>
            <returns>ApiResponse of PlayerModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.AuthPlayerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Authenticate player
            </summary>
            <remarks>
            Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of AuthPlayer200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.AuthPlayerWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Authenticate player
            </summary>
            <remarks>
            Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (AuthPlayer200Response)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.CreatePlayerAsync(System.String,Org.MetaFab.Model.CreatePlayerRequest,System.Threading.CancellationToken)">
            <summary>
            Create player
            </summary>
            <remarks>
            Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="createPlayerRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of AuthPlayer200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.CreatePlayerWithHttpInfoAsync(System.String,Org.MetaFab.Model.CreatePlayerRequest,System.Threading.CancellationToken)">
            <summary>
            Create player
            </summary>
            <remarks>
            Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="createPlayerRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (AuthPlayer200Response)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.GetPlayerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get player
            </summary>
            <remarks>
            Returns a player object for the provided player id.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of PublicPlayer</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.GetPlayerWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get player
            </summary>
            <remarks>
            Returns a player object for the provided player id.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (PublicPlayer)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.GetPlayerDataAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get player data
            </summary>
            <remarks>
            Returns the latest public and protected data as an object for the provided playerId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of GetPlayerData200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.GetPlayerDataWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get player data
            </summary>
            <remarks>
            Returns the latest public and protected data as an object for the provided playerId.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (GetPlayerData200Response)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IPlayersApi.GetPlayersAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.IPlayersApi.GetPlayersWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get players
            </summary>
            <remarks>
            Returns all players for the authenticated game as an array of player objects.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (List&lt;PublicPlayer&gt;)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.SetPlayerDataAsync(System.String,System.String,Org.MetaFab.Model.SetPlayerDataRequest,System.Threading.CancellationToken)">
            <summary>
            Set player data
            </summary>
            <remarks>
            Creates or updates public and/or protected data for the provided playerId. Data updates are performed using deep merging. This means that when you update any top level or nested properties specific to player public or protected data, you only need to include the properties you are making changes to. Any existing properties not included in request body arguments will be retained on the player data object.  Please note, When writing an array type for a player, arrays do not follow the deep merge approach. If you add or remove an item from an array, the entire array must be passed as an argument when updating the related property for player public or protected data.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="setPlayerDataRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of GetPlayerData200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.SetPlayerDataWithHttpInfoAsync(System.String,System.String,Org.MetaFab.Model.SetPlayerDataRequest,System.Threading.CancellationToken)">
            <summary>
            Set player data
            </summary>
            <remarks>
            Creates or updates public and/or protected data for the provided playerId. Data updates are performed using deep merging. This means that when you update any top level or nested properties specific to player public or protected data, you only need to include the properties you are making changes to. Any existing properties not included in request body arguments will be retained on the player data object.  Please note, When writing an array type for a player, arrays do not follow the deep merge approach. If you add or remove an item from an array, the entire array must be passed as an argument when updating the related property for player public or protected data.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="setPlayerDataRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (GetPlayerData200Response)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.UpdatePlayerAsync(System.String,System.String,Org.MetaFab.Model.UpdatePlayerRequest,System.Threading.CancellationToken)">
            <summary>
            Update player
            </summary>
            <remarks>
            Update various fields specific to a player. Such as changing its password and resetting its access token.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `accessToken` of the authenticating player.</param>
            <param name="updatePlayerRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of PlayerModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.IPlayersApi.UpdatePlayerWithHttpInfoAsync(System.String,System.String,Org.MetaFab.Model.UpdatePlayerRequest,System.Threading.CancellationToken)">
            <summary>
            Update player
            </summary>
            <remarks>
            Update various fields specific to a player. Such as changing its password and resetting its access token.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `accessToken` of the authenticating player.</param>
            <param name="updatePlayerRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (PlayerModel)</returns>
        </member>
        <member name="T:Org.MetaFab.Api.PlayersApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.PlayersApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.PlayersApi"/> class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.#ctor(Org.MetaFab.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.PlayersApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.AuthPlayer(System.String)">
            <summary>
            Authenticate player Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <returns>AuthPlayer200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.AuthPlayerWithHttpInfo(System.String)">
            <summary>
            Authenticate player Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <returns>ApiResponse of AuthPlayer200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.AuthPlayerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Authenticate player Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of AuthPlayer200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.AuthPlayerWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Authenticate player Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (AuthPlayer200Response)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.CreatePlayer(System.String,Org.MetaFab.Model.CreatePlayerRequest)">
            <summary>
            Create player Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="createPlayerRequest"></param>
            <returns>AuthPlayer200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.CreatePlayerWithHttpInfo(System.String,Org.MetaFab.Model.CreatePlayerRequest)">
            <summary>
            Create player Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="createPlayerRequest"></param>
            <returns>ApiResponse of AuthPlayer200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.CreatePlayerAsync(System.String,Org.MetaFab.Model.CreatePlayerRequest,System.Threading.CancellationToken)">
            <summary>
            Create player Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="createPlayerRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of AuthPlayer200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.CreatePlayerWithHttpInfoAsync(System.String,Org.MetaFab.Model.CreatePlayerRequest,System.Threading.CancellationToken)">
            <summary>
            Create player Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xGameKey">The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.</param>
            <param name="createPlayerRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (AuthPlayer200Response)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.GetPlayer(System.String)">
            <summary>
            Get player Returns a player object for the provided player id.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <returns>PublicPlayer</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.GetPlayerWithHttpInfo(System.String)">
            <summary>
            Get player Returns a player object for the provided player id.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <returns>ApiResponse of PublicPlayer</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.GetPlayerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get player Returns a player object for the provided player id.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of PublicPlayer</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.GetPlayerWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get player Returns a player object for the provided player id.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (PublicPlayer)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.GetPlayerData(System.String)">
            <summary>
            Get player data Returns the latest public and protected data as an object for the provided playerId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <returns>GetPlayerData200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.GetPlayerDataWithHttpInfo(System.String)">
            <summary>
            Get player data Returns the latest public and protected data as an object for the provided playerId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <returns>ApiResponse of GetPlayerData200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.GetPlayerDataAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get player data Returns the latest public and protected data as an object for the provided playerId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of GetPlayerData200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.GetPlayerDataWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get player data Returns the latest public and protected data as an object for the provided playerId.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (GetPlayerData200Response)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.PlayersApi.GetPlayers(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.PlayersApi.GetPlayersWithHttpInfo(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.PlayersApi.GetPlayersAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.PlayersApi.GetPlayersWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get players Returns all players for the authenticated game as an array of player objects.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="xAuthorization">The `secretKey` of the authenticating game.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (List&lt;PublicPlayer&gt;)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.SetPlayerData(System.String,System.String,Org.MetaFab.Model.SetPlayerDataRequest)">
            <summary>
            Set player data Creates or updates public and/or protected data for the provided playerId. Data updates are performed using deep merging. This means that when you update any top level or nested properties specific to player public or protected data, you only need to include the properties you are making changes to. Any existing properties not included in request body arguments will be retained on the player data object.  Please note, When writing an array type for a player, arrays do not follow the deep merge approach. If you add or remove an item from an array, the entire array must be passed as an argument when updating the related property for player public or protected data.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="setPlayerDataRequest"></param>
            <returns>GetPlayerData200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.SetPlayerDataWithHttpInfo(System.String,System.String,Org.MetaFab.Model.SetPlayerDataRequest)">
            <summary>
            Set player data Creates or updates public and/or protected data for the provided playerId. Data updates are performed using deep merging. This means that when you update any top level or nested properties specific to player public or protected data, you only need to include the properties you are making changes to. Any existing properties not included in request body arguments will be retained on the player data object.  Please note, When writing an array type for a player, arrays do not follow the deep merge approach. If you add or remove an item from an array, the entire array must be passed as an argument when updating the related property for player public or protected data.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="setPlayerDataRequest"></param>
            <returns>ApiResponse of GetPlayerData200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.SetPlayerDataAsync(System.String,System.String,Org.MetaFab.Model.SetPlayerDataRequest,System.Threading.CancellationToken)">
            <summary>
            Set player data Creates or updates public and/or protected data for the provided playerId. Data updates are performed using deep merging. This means that when you update any top level or nested properties specific to player public or protected data, you only need to include the properties you are making changes to. Any existing properties not included in request body arguments will be retained on the player data object.  Please note, When writing an array type for a player, arrays do not follow the deep merge approach. If you add or remove an item from an array, the entire array must be passed as an argument when updating the related property for player public or protected data.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="setPlayerDataRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of GetPlayerData200Response</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.SetPlayerDataWithHttpInfoAsync(System.String,System.String,Org.MetaFab.Model.SetPlayerDataRequest,System.Threading.CancellationToken)">
            <summary>
            Set player data Creates or updates public and/or protected data for the provided playerId. Data updates are performed using deep merging. This means that when you update any top level or nested properties specific to player public or protected data, you only need to include the properties you are making changes to. Any existing properties not included in request body arguments will be retained on the player data object.  Please note, When writing an array type for a player, arrays do not follow the deep merge approach. If you add or remove an item from an array, the entire array must be passed as an argument when updating the related property for player public or protected data.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `secretKey` of a specific game or the `accessToken` of a specific player.</param>
            <param name="setPlayerDataRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (GetPlayerData200Response)</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.UpdatePlayer(System.String,System.String,Org.MetaFab.Model.UpdatePlayerRequest)">
            <summary>
            Update player Update various fields specific to a player. Such as changing its password and resetting its access token.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `accessToken` of the authenticating player.</param>
            <param name="updatePlayerRequest"></param>
            <returns>PlayerModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.UpdatePlayerWithHttpInfo(System.String,System.String,Org.MetaFab.Model.UpdatePlayerRequest)">
            <summary>
            Update player Update various fields specific to a player. Such as changing its password and resetting its access token.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `accessToken` of the authenticating player.</param>
            <param name="updatePlayerRequest"></param>
            <returns>ApiResponse of PlayerModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.UpdatePlayerAsync(System.String,System.String,Org.MetaFab.Model.UpdatePlayerRequest,System.Threading.CancellationToken)">
            <summary>
            Update player Update various fields specific to a player. Such as changing its password and resetting its access token.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `accessToken` of the authenticating player.</param>
            <param name="updatePlayerRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of PlayerModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.PlayersApi.UpdatePlayerWithHttpInfoAsync(System.String,System.String,Org.MetaFab.Model.UpdatePlayerRequest,System.Threading.CancellationToken)">
            <summary>
            Update player Update various fields specific to a player. Such as changing its password and resetting its access token.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="playerId">Any player id within the MetaFab ecosystem.</param>
            <param name="xAuthorization">The `accessToken` of the authenticating player.</param>
            <param name="updatePlayerRequest"></param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (PlayerModel)</returns>
        </member>
        <member name="P:Org.MetaFab.Api.PlayersApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Org.MetaFab.Api.PlayersApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="T:Org.MetaFab.Api.ITransactionsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Org.MetaFab.Api.ITransactionsApi.GetTransaction(System.String)">
            <summary>
            Get transaction
            </summary>
            <remarks>
            Returns an executed transaction object for the provided transactionId. Transactions are created by MetaFab when interacting with contracts, currencies, items and other MetaFab resources.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="transactionId">Any transaction id within the MetaFab ecosystem.</param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ITransactionsApi.GetTransactionWithHttpInfo(System.String)">
            <summary>
            Get transaction
            </summary>
            <remarks>
            Returns an executed transaction object for the provided transactionId. Transactions are created by MetaFab when interacting with contracts, currencies, items and other MetaFab resources.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="transactionId">Any transaction id within the MetaFab ecosystem.</param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ITransactionsApi.GetTransactionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get transaction
            </summary>
            <remarks>
            Returns an executed transaction object for the provided transactionId. Transactions are created by MetaFab when interacting with contracts, currencies, items and other MetaFab resources.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="transactionId">Any transaction id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.ITransactionsApi.GetTransactionWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get transaction
            </summary>
            <remarks>
            Returns an executed transaction object for the provided transactionId. Transactions are created by MetaFab when interacting with contracts, currencies, items and other MetaFab resources.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="transactionId">Any transaction id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="T:Org.MetaFab.Api.TransactionsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Org.MetaFab.Api.TransactionsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.TransactionsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.TransactionsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.TransactionsApi"/> class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.TransactionsApi.#ctor(Org.MetaFab.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.TransactionsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.TransactionsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Org.MetaFab.Api.TransactionsApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Org.MetaFab.Api.TransactionsApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Org.MetaFab.Api.TransactionsApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.TransactionsApi.GetTransaction(System.String)">
            <summary>
            Get transaction Returns an executed transaction object for the provided transactionId. Transactions are created by MetaFab when interacting with contracts, currencies, items and other MetaFab resources.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="transactionId">Any transaction id within the MetaFab ecosystem.</param>
            <returns>TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.TransactionsApi.GetTransactionWithHttpInfo(System.String)">
            <summary>
            Get transaction Returns an executed transaction object for the provided transactionId. Transactions are created by MetaFab when interacting with contracts, currencies, items and other MetaFab resources.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="transactionId">Any transaction id within the MetaFab ecosystem.</param>
            <returns>ApiResponse of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.TransactionsApi.GetTransactionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get transaction Returns an executed transaction object for the provided transactionId. Transactions are created by MetaFab when interacting with contracts, currencies, items and other MetaFab resources.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="transactionId">Any transaction id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of TransactionModel</returns>
        </member>
        <member name="M:Org.MetaFab.Api.TransactionsApi.GetTransactionWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get transaction Returns an executed transaction object for the provided transactionId. Transactions are created by MetaFab when interacting with contracts, currencies, items and other MetaFab resources.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="transactionId">Any transaction id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (TransactionModel)</returns>
        </member>
        <member name="P:Org.MetaFab.Api.TransactionsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Org.MetaFab.Api.TransactionsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="T:Org.MetaFab.Api.IWalletsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IWalletsApi.GetWalletBalances(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IWalletsApi.GetWalletBalancesWithHttpInfo(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IWalletsApi.GetWalletTransactions(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IWalletsApi.GetWalletTransactionsWithHttpInfo(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IWalletsApi.GetWalletBalancesAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.IWalletsApi.GetWalletBalancesWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get wallet balances
            </summary>
            <remarks>
            Returns the current native token balance for all chains supported by MetaFab for the provided walletId. This includes balances like Eth, Matic and other native tokens from chains MetaFab supports.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="walletId">Any wallet id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (Dictionary&lt;string, decimal&gt;)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.IWalletsApi.GetWalletTransactionsAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.IWalletsApi.GetWalletTransactionsWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get wallet transactions
            </summary>
            <remarks>
            Returns an array of MetaFab initiated transactions performed by the provided walletId. Transactions returned are ordered chronologically from newest to oldest.
            </remarks>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="walletId">Any wallet id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (List&lt;TransactionModel&gt;)</returns>
        </member>
        <member name="T:Org.MetaFab.Api.WalletsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Org.MetaFab.Api.WalletsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.WalletsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.WalletsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.WalletsApi"/> class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.WalletsApi.#ctor(Org.MetaFab.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Api.WalletsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Api.WalletsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Org.MetaFab.Api.WalletsApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Org.MetaFab.Api.WalletsApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Org.MetaFab.Api.WalletsApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.WalletsApi.GetWalletBalances(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.WalletsApi.GetWalletBalancesWithHttpInfo(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.WalletsApi.GetWalletBalancesAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.WalletsApi.GetWalletBalancesWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get wallet balances Returns the current native token balance for all chains supported by MetaFab for the provided walletId. This includes balances like Eth, Matic and other native tokens from chains MetaFab supports.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="walletId">Any wallet id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (Dictionary&lt;string, decimal&gt;)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.WalletsApi.GetWalletTransactions(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.WalletsApi.GetWalletTransactionsWithHttpInfo(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Org.MetaFab.Api.WalletsApi.GetWalletTransactionsAsync(System.String,System.Threading.CancellationToken)" -->
        <member name="M:Org.MetaFab.Api.WalletsApi.GetWalletTransactionsWithHttpInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get wallet transactions Returns an array of MetaFab initiated transactions performed by the provided walletId. Transactions returned are ordered chronologically from newest to oldest.
            </summary>
            <exception cref="T:Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="walletId">Any wallet id within the MetaFab ecosystem.</param>
            <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
            <returns>Task of ApiResponse (List&lt;TransactionModel&gt;)</returns>
        </member>
        <member name="P:Org.MetaFab.Api.WalletsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Org.MetaFab.Api.WalletsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="T:Org.MetaFab.Client.ApiClient">
            <summary>
            API client is mainly responsible for making the HTTP call to the API backend.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Client.ApiClient"/> class
            with default configuration.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.#ctor(Org.MetaFab.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Client.ApiClient"/> class
            with default base path (https://api.trymetafab.com).
            </summary>
            <param name="config">An instance of Configuration.</param>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Client.ApiClient"/> class
            with default configuration.
            </summary>
            <param name="basePath">The base path.</param>
        </member>
        <member name="F:Org.MetaFab.Client.ApiClient.Default">
            <summary>
            Gets or sets the default API client for making HTTP calls.
            </summary>
            <value>The default API client.</value>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.CallApi(System.String,RestSharp.Method,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,RestSharp.FileParameter},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Makes the HTTP request (Sync).
            </summary>
            <param name="path">URL path.</param>
            <param name="method">HTTP method.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="postBody">HTTP body (POST request).</param>
            <param name="headerParams">Header parameters.</param>
            <param name="formParams">Form parameters.</param>
            <param name="fileParams">File parameters.</param>
            <param name="pathParams">Path parameters.</param>
            <param name="contentType">Content Type of the request</param>
            <returns>Object</returns>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.CallApiAsync(System.String,RestSharp.Method,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,RestSharp.FileParameter},System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Makes the asynchronous HTTP request.
            </summary>
            <param name="path">URL path.</param>
            <param name="method">HTTP method.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="postBody">HTTP body (POST request).</param>
            <param name="headerParams">Header parameters.</param>
            <param name="formParams">Form parameters.</param>
            <param name="fileParams">File parameters.</param>
            <param name="pathParams">Path parameters.</param>
            <param name="contentType">Content type.</param>
            <param name="cancellationToken">Cancellation Token.</param>
            <returns>The Task instance.</returns>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.EscapeString(System.String)">
            <summary>
            Escape string (url-encoded).
            </summary>
            <param name="str">String to be escaped.</param>
            <returns>Escaped string.</returns>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.ParameterToFile(System.String,System.IO.Stream)">
            <summary>
            Create FileParameter based on Stream.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="stream">Input stream.</param>
            <returns>FileParameter.</returns>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.ParameterToString(System.Object)">
            <summary>
            If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
            If parameter is a list, join the list with ",".
            Otherwise just return the string.
            </summary>
            <param name="obj">The parameter (header, path, query, form).</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.Deserialize(RestSharp.IRestResponse,System.Type)">
            <summary>
            Deserialize the JSON string into a proper object.
            </summary>
            <param name="response">The HTTP response.</param>
            <param name="type">Object type.</param>
            <returns>Object representation of the JSON string.</returns>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.Serialize(System.Object)">
            <summary>
            Serialize an input (model) into JSON string
            </summary>
            <param name="obj">Object.</param>
            <returns>JSON string.</returns>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.IsJsonMime(System.String)">
             <summary>
            Check if the given MIME is a JSON MIME.
            JSON MIME examples:
                application/json
                application/json; charset=UTF8
                APPLICATION/JSON
                application/vnd.company+json
             </summary>
             <param name="mime">MIME</param>
             <returns>Returns True if MIME type is json.</returns>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.SelectHeaderContentType(System.String[])">
            <summary>
            Select the Content-Type header's value from the given content-type array:
            if JSON type exists in the given array, use it;
            otherwise use the first one defined in 'consumes'
            </summary>
            <param name="contentTypes">The Content-Type array to select from.</param>
            <returns>The Content-Type header to use.</returns>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.SelectHeaderAccept(System.String[])">
            <summary>
            Select the Accept header's value from the given accepts array:
            if JSON exists in the given array, use it;
            otherwise use all of them (joining into a string)
            </summary>
            <param name="accepts">The accepts array to select from.</param>
            <returns>The Accept header to use.</returns>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.Base64Encode(System.String)">
            <summary>
            Encode string in base64 format.
            </summary>
            <param name="text">String to be encoded.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.ConvertType(System.Object,System.Type)">
            <summary>
            Dynamically cast the object into target type.
            </summary>
            <param name="fromObject">Object to be casted</param>
            <param name="toObject">Target type</param>
            <returns>Casted object</returns>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.ReadAsBytes(System.IO.Stream)">
            <summary>
            Convert stream to byte array
            </summary>
            <param name="inputStream">Input stream to be converted</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.UrlEncode(System.String)">
            <summary>
            URL encode a string
            Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
            </summary>
            <param name="input">String to be URL encoded</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.SanitizeFilename(System.String)">
            <summary>
            Sanitize filename by removing the path
            </summary>
            <param name="filename">Filename</param>
            <returns>Filename</returns>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.ParameterToKeyValuePairs(System.String,System.String,System.Object)">
            <summary>
            Convert params to key/value pairs.
            Use collectionFormat to properly format lists and collections.
            </summary>
            <param name="collectionFormat">Collection format.</param>
            <param name="name">Key name.</param>
            <param name="value">Value object.</param>
            <returns>A list of KeyValuePairs</returns>
        </member>
        <member name="M:Org.MetaFab.Client.ApiClient.IsCollection(System.Object)">
            <summary>
            Check if generic object is a collection.
            </summary>
            <param name="value"></param>
            <returns>True if object is a collection type</returns>
        </member>
        <member name="P:Org.MetaFab.Client.ApiClient.Configuration">
            <summary>
            Gets or sets an instance of the IReadableConfiguration.
            </summary>
            <value>An instance of the IReadableConfiguration.</value>
            <remarks>
            <see cref="T:Org.MetaFab.Client.IReadableConfiguration"/> helps us to avoid modifying possibly global
            configuration values from within a given client. It does not guarantee thread-safety
            of the <see cref="P:Org.MetaFab.Client.ApiClient.Configuration"/> instance in any way.
            </remarks>
        </member>
        <member name="P:Org.MetaFab.Client.ApiClient.RestClient">
            <summary>
            Gets or sets the RestClient.
            </summary>
            <value>An instance of the RestClient</value>
        </member>
        <member name="T:Org.MetaFab.Client.ApiException">
            <summary>
            API Exception
            </summary>
        </member>
        <member name="M:Org.MetaFab.Client.ApiException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Client.ApiException"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Client.ApiException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Org.MetaFab.Client.ApiException.#ctor(System.Int32,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
            <param name="errorContent">Error content.</param>
        </member>
        <member name="P:Org.MetaFab.Client.ApiException.ErrorCode">
            <summary>
            Gets or sets the error code (HTTP status code)
            </summary>
            <value>The error code (HTTP status code).</value>
        </member>
        <member name="P:Org.MetaFab.Client.ApiException.ErrorContent">
            <summary>
            Gets or sets the error content (body json object)
            </summary>
            <value>The error content (Http response body).</value>
        </member>
        <member name="T:Org.MetaFab.Client.ApiResponse`1">
            <summary>
            API Response
            </summary>
        </member>
        <member name="M:Org.MetaFab.Client.ApiResponse`1.#ctor(System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Client.ApiResponse`1"/> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="headers">HTTP headers.</param>
            <param name="data">Data (parsed HTTP body)</param>
        </member>
        <member name="P:Org.MetaFab.Client.ApiResponse`1.StatusCode">
            <summary>
            Gets or sets the status code (HTTP status code)
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:Org.MetaFab.Client.ApiResponse`1.Headers">
            <summary>
            Gets or sets the HTTP headers
            </summary>
            <value>HTTP headers</value>
        </member>
        <member name="P:Org.MetaFab.Client.ApiResponse`1.Data">
            <summary>
            Gets or sets the data (parsed HTTP body)
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:Org.MetaFab.Client.Configuration">
            <summary>
            Represents a set of configuration settings
            </summary>
        </member>
        <member name="T:Org.MetaFab.Client.IReadableConfiguration">
            <summary>
            Represents a readable-only configuration contract.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Client.IReadableConfiguration.GetApiKeyWithPrefix(System.String)">
            <summary>
            Gets the API key with prefix.
            </summary>
            <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
            <returns>API key with prefix.</returns>
        </member>
        <member name="P:Org.MetaFab.Client.IReadableConfiguration.AccessToken">
            <summary>
            Gets the access token.
            </summary>
            <value>Access token.</value>
        </member>
        <member name="P:Org.MetaFab.Client.IReadableConfiguration.ApiKey">
            <summary>
            Gets the API key.
            </summary>
            <value>API key.</value>
        </member>
        <member name="P:Org.MetaFab.Client.IReadableConfiguration.ApiKeyPrefix">
            <summary>
            Gets the API key prefix.
            </summary>
            <value>API key prefix.</value>
        </member>
        <member name="P:Org.MetaFab.Client.IReadableConfiguration.BasePath">
            <summary>
            Gets the base path.
            </summary>
            <value>Base path.</value>
        </member>
        <member name="P:Org.MetaFab.Client.IReadableConfiguration.DateTimeFormat">
            <summary>
            Gets the date time format.
            </summary>
            <value>Date time format.</value>
        </member>
        <member name="P:Org.MetaFab.Client.IReadableConfiguration.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <value>Default header.</value>
        </member>
        <member name="P:Org.MetaFab.Client.IReadableConfiguration.TempFolderPath">
            <summary>
            Gets the temp folder path.
            </summary>
            <value>Temp folder path.</value>
        </member>
        <member name="P:Org.MetaFab.Client.IReadableConfiguration.Timeout">
            <summary>
            Gets the HTTP connection timeout (in milliseconds)
            </summary>
            <value>HTTP connection timeout.</value>
        </member>
        <member name="P:Org.MetaFab.Client.IReadableConfiguration.UserAgent">
            <summary>
            Gets the user agent.
            </summary>
            <value>User agent.</value>
        </member>
        <member name="P:Org.MetaFab.Client.IReadableConfiguration.Username">
            <summary>
            Gets the username.
            </summary>
            <value>Username.</value>
        </member>
        <member name="P:Org.MetaFab.Client.IReadableConfiguration.Password">
            <summary>
            Gets the password.
            </summary>
            <value>Password.</value>
        </member>
        <member name="F:Org.MetaFab.Client.Configuration.Version">
            <summary>
            Version of the package.
            </summary>
            <value>Version of the package.</value>
        </member>
        <member name="F:Org.MetaFab.Client.Configuration.ISO8601_DATETIME_FORMAT">
            <summary>
            Identifier for ISO 8601 DateTime Format
            </summary>
            <remarks>See https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8 for more information.</remarks>
        </member>
        <member name="F:Org.MetaFab.Client.Configuration.DefaultExceptionFactory">
            <summary>
            Default creation of exceptions for a given method name and response object
            </summary>
        </member>
        <member name="F:Org.MetaFab.Client.Configuration._apiKey">
            <summary>
            Gets or sets the API key based on the authentication name.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="F:Org.MetaFab.Client.Configuration._apiKeyPrefix">
            <summary>
            Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
            </summary>
            <value>The prefix of the API key.</value>
        </member>
        <member name="M:Org.MetaFab.Client.Configuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Client.Configuration"/> class
            </summary>
        </member>
        <member name="M:Org.MetaFab.Client.Configuration.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Client.Configuration"/> class
            </summary>
        </member>
        <member name="M:Org.MetaFab.Client.Configuration.#ctor(Org.MetaFab.Client.ApiClient,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Client.Configuration"/> class with different settings
            </summary>
            <param name="apiClient">Api client</param>
            <param name="defaultHeader">Dictionary of default HTTP header</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="accessToken">accessToken</param>
            <param name="apiKey">Dictionary of API key</param>
            <param name="apiKeyPrefix">Dictionary of API key prefix</param>
            <param name="tempFolderPath">Temp folder path</param>
            <param name="dateTimeFormat">DateTime format string</param>
            <param name="timeout">HTTP connection timeout (in milliseconds)</param>
            <param name="userAgent">HTTP user agent</param>
        </member>
        <member name="M:Org.MetaFab.Client.Configuration.#ctor(Org.MetaFab.Client.ApiClient)">
            <summary>
            Initializes a new instance of the Configuration class.
            </summary>
            <param name="apiClient">Api client.</param>
        </member>
        <member name="M:Org.MetaFab.Client.Configuration.GetApiKeyWithPrefix(System.String)">
            <summary>
            Gets the API key with prefix.
            </summary>
            <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
            <returns>API key with prefix.</returns>
        </member>
        <member name="M:Org.MetaFab.Client.Configuration.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Client.Configuration.CreateApiClient">
            <summary>
            Creates a new <see cref="P:Org.MetaFab.Client.Configuration.ApiClient"/> based on this <see cref="T:Org.MetaFab.Client.Configuration"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Client.Configuration.ToDebugReport">
            <summary>
            Returns a string with essential information for debugging.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Client.Configuration.AddApiKey(System.String,System.String)">
            <summary>
            Add Api Key Header.
            </summary>
            <param name="key">Api Key name.</param>
            <param name="value">Api Key value.</param>
            <returns></returns>
        </member>
        <member name="M:Org.MetaFab.Client.Configuration.AddApiKeyPrefix(System.String,System.String)">
            <summary>
            Sets the API key prefix.
            </summary>
            <param name="key">Api Key name.</param>
            <param name="value">Api Key value.</param>
        </member>
        <member name="P:Org.MetaFab.Client.Configuration.Default">
            <summary>
            Gets or sets the default Configuration.
            </summary>
            <value>Configuration.</value>
        </member>
        <member name="P:Org.MetaFab.Client.Configuration.ApiClient">
            <summary>
            Gets an instance of an ApiClient for this configuration
            </summary>
        </member>
        <member name="P:Org.MetaFab.Client.Configuration.BasePath">
            <summary>
            Gets or sets the base path for API access.
            </summary>
        </member>
        <member name="P:Org.MetaFab.Client.Configuration.DefaultHeader">
            <summary>
            Gets or sets the default header.
            </summary>
        </member>
        <member name="P:Org.MetaFab.Client.Configuration.Timeout">
            <summary>
            Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
            </summary>
        </member>
        <member name="P:Org.MetaFab.Client.Configuration.UserAgent">
            <summary>
            Gets or sets the HTTP user agent.
            </summary>
            <value>Http user agent.</value>
        </member>
        <member name="P:Org.MetaFab.Client.Configuration.Username">
            <summary>
            Gets or sets the username (HTTP basic authentication).
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Org.MetaFab.Client.Configuration.Password">
            <summary>
            Gets or sets the password (HTTP basic authentication).
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Org.MetaFab.Client.Configuration.AccessToken">
            <summary>
            Gets or sets the access token for OAuth2 authentication.
            </summary>
            <value>The access token.</value>
        </member>
        <member name="P:Org.MetaFab.Client.Configuration.TempFolderPath">
            <summary>
            Gets or sets the temporary folder path to store the files downloaded from the server.
            </summary>
            <value>Folder path.</value>
        </member>
        <member name="P:Org.MetaFab.Client.Configuration.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when serializing in the ApiClient
            By default, it's set to ISO 8601 - "o", for others see:
            https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
            and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
            No validation is done to ensure that the string you're providing is valid
            </summary>
            <value>The DateTimeFormat string</value>
        </member>
        <member name="P:Org.MetaFab.Client.Configuration.ApiKeyPrefix">
            <summary>
            Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
            </summary>
            <value>The prefix of the API key.</value>
        </member>
        <member name="P:Org.MetaFab.Client.Configuration.ApiKey">
            <summary>
            Gets or sets the API key based on the authentication name.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="T:Org.MetaFab.Client.ExceptionFactory">
            <summary>
            A delegate to ExceptionFactory method
            </summary>
            <param name="methodName">Method name</param>
            <param name="response">Response</param>
            <returns>Exceptions</returns>
        </member>
        <member name="T:Org.MetaFab.Client.GlobalConfiguration">
            <summary>
            <see cref="T:Org.MetaFab.Client.GlobalConfiguration"/> provides a compile-time extension point for globally configuring
            API Clients.
            </summary>
            <remarks>
            A customized implementation via partial class may reside in another file and may
            be excluded from automatic generation via a .openapi-generator-ignore file.
            </remarks>
        </member>
        <member name="T:Org.MetaFab.Client.OpenAPIDateConverter">
            <summary>
            Formatter for 'date' openapi formats ss defined by full-date - RFC3339
            see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#data-types
            </summary>
        </member>
        <member name="M:Org.MetaFab.Client.OpenAPIDateConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Client.OpenAPIDateConverter"/> class.
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.AuthGame200Response">
            <summary>
            AuthGame200Response
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200Response.#ctor(System.String,System.String,System.String,System.String,System.String,System.Object,System.String,System.String,System.String,System.String,Org.MetaFab.Model.WalletModel,Org.MetaFab.Model.WalletModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.AuthGame200Response"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="walletId">This field has not had a description added..</param>
            <param name="fundingWalletId">This field has not had a description added..</param>
            <param name="email">This field has not had a description added..</param>
            <param name="name">This field has not had a description added..</param>
            <param name="rpcs">This field has not had a description added..</param>
            <param name="publishedKey">This field has not had a description added..</param>
            <param name="secretKey">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
            <param name="wallet">wallet.</param>
            <param name="fundingWallet">fundingWallet.</param>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200Response.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200Response.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200Response.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200Response.Equals(Org.MetaFab.Model.AuthGame200Response)">
            <summary>
            Returns true if AuthGame200Response instances are equal
            </summary>
            <param name="input">Instance of AuthGame200Response to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200Response.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200Response.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.AuthGame200Response.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.AuthGame200Response.WalletId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.AuthGame200Response.FundingWalletId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.AuthGame200Response.Email">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.AuthGame200Response.Name">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.AuthGame200Response.Rpcs">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.AuthGame200Response.PublishedKey">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.AuthGame200Response.SecretKey">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.AuthGame200Response.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.AuthGame200Response.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.AuthGame200Response.Wallet">
            <summary>
            Gets or Sets Wallet
            </summary>
        </member>
        <member name="P:Org.MetaFab.Model.AuthGame200Response.FundingWallet">
            <summary>
            Gets or Sets FundingWallet
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.AuthGame200ResponseAllOf">
            <summary>
            AuthGame200ResponseAllOf
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200ResponseAllOf.#ctor(Org.MetaFab.Model.WalletModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.AuthGame200ResponseAllOf"/> class.
            </summary>
            <param name="wallet">wallet.</param>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200ResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200ResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200ResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200ResponseAllOf.Equals(Org.MetaFab.Model.AuthGame200ResponseAllOf)">
            <summary>
            Returns true if AuthGame200ResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of AuthGame200ResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200ResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200ResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.AuthGame200ResponseAllOf.Wallet">
            <summary>
            Gets or Sets Wallet
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.AuthGame200ResponseAllOf1">
            <summary>
            AuthGame200ResponseAllOf1
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200ResponseAllOf1.#ctor(Org.MetaFab.Model.WalletModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.AuthGame200ResponseAllOf1"/> class.
            </summary>
            <param name="fundingWallet">fundingWallet.</param>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200ResponseAllOf1.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200ResponseAllOf1.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200ResponseAllOf1.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200ResponseAllOf1.Equals(Org.MetaFab.Model.AuthGame200ResponseAllOf1)">
            <summary>
            Returns true if AuthGame200ResponseAllOf1 instances are equal
            </summary>
            <param name="input">Instance of AuthGame200ResponseAllOf1 to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200ResponseAllOf1.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthGame200ResponseAllOf1.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.AuthGame200ResponseAllOf1.FundingWallet">
            <summary>
            Gets or Sets FundingWallet
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.AuthPlayer200Response">
            <summary>
            AuthPlayer200Response
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.AuthPlayer200Response.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,Org.MetaFab.Model.WalletModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.AuthPlayer200Response"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="gameId">This field has not had a description added..</param>
            <param name="walletId">This field has not had a description added..</param>
            <param name="username">This field has not had a description added..</param>
            <param name="accessToken">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
            <param name="wallet">wallet.</param>
        </member>
        <member name="M:Org.MetaFab.Model.AuthPlayer200Response.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthPlayer200Response.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthPlayer200Response.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthPlayer200Response.Equals(Org.MetaFab.Model.AuthPlayer200Response)">
            <summary>
            Returns true if AuthPlayer200Response instances are equal
            </summary>
            <param name="input">Instance of AuthPlayer200Response to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthPlayer200Response.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.AuthPlayer200Response.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.AuthPlayer200Response.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.AuthPlayer200Response.GameId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.AuthPlayer200Response.WalletId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.AuthPlayer200Response.Username">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.AuthPlayer200Response.AccessToken">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.AuthPlayer200Response.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.AuthPlayer200Response.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.AuthPlayer200Response.Wallet">
            <summary>
            Gets or Sets Wallet
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.BatchMintCollectionItemsRequest">
            <summary>
            BatchMintCollectionItemsRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.BatchMintCollectionItemsRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.BatchMintCollectionItemsRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.BatchMintCollectionItemsRequest.#ctor(System.String,System.Collections.Generic.List{System.Decimal},System.Collections.Generic.List{System.Decimal},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.BatchMintCollectionItemsRequest"/> class.
            </summary>
            <param name="address">A valid EVM based address to create (mint) the items for. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`..</param>
            <param name="itemIds">An array of unique itemIds to create (mint). (required).</param>
            <param name="quantities">An array of the quantities of each of the unique itemIds provided to create (mint). The quantity of each itemId in itemIds should be at the same index as the specific itemId in the itemIds array. For example, quantities[2] defines the quantity to mint for itemIds[2], etc. (required).</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem to create (mint) the items for..</param>
        </member>
        <member name="M:Org.MetaFab.Model.BatchMintCollectionItemsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BatchMintCollectionItemsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BatchMintCollectionItemsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BatchMintCollectionItemsRequest.Equals(Org.MetaFab.Model.BatchMintCollectionItemsRequest)">
            <summary>
            Returns true if BatchMintCollectionItemsRequest instances are equal
            </summary>
            <param name="input">Instance of BatchMintCollectionItemsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BatchMintCollectionItemsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BatchMintCollectionItemsRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.BatchMintCollectionItemsRequest.Address">
            <summary>
            A valid EVM based address to create (mint) the items for. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.
            </summary>
            <value>A valid EVM based address to create (mint) the items for. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.</value>
        </member>
        <member name="P:Org.MetaFab.Model.BatchMintCollectionItemsRequest.ItemIds">
            <summary>
            An array of unique itemIds to create (mint).
            </summary>
            <value>An array of unique itemIds to create (mint).</value>
        </member>
        <member name="P:Org.MetaFab.Model.BatchMintCollectionItemsRequest.Quantities">
            <summary>
            An array of the quantities of each of the unique itemIds provided to create (mint). The quantity of each itemId in itemIds should be at the same index as the specific itemId in the itemIds array. For example, quantities[2] defines the quantity to mint for itemIds[2], etc.
            </summary>
            <value>An array of the quantities of each of the unique itemIds provided to create (mint). The quantity of each itemId in itemIds should be at the same index as the specific itemId in the itemIds array. For example, quantities[2] defines the quantity to mint for itemIds[2], etc.</value>
        </member>
        <member name="P:Org.MetaFab.Model.BatchMintCollectionItemsRequest.WalletId">
            <summary>
            Any wallet id within the MetaFab ecosystem to create (mint) the items for.
            </summary>
            <value>Any wallet id within the MetaFab ecosystem to create (mint) the items for.</value>
        </member>
        <member name="T:Org.MetaFab.Model.BatchTransferCollectionItemsRequest">
            <summary>
            BatchTransferCollectionItemsRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.BatchTransferCollectionItemsRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.BatchTransferCollectionItemsRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.BatchTransferCollectionItemsRequest.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Decimal},System.Collections.Generic.List{System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.BatchTransferCollectionItemsRequest"/> class.
            </summary>
            <param name="addresses">An array of valid EVM based addresses to transfer items to..</param>
            <param name="walletIds">An array of wallet ids within the MetaFab ecosystem to transfer items to..</param>
            <param name="itemIds">An array of unique itemIds to transfer. Each recipient will receive the same set of items provided. (required).</param>
            <param name="quantities">The quantities of each unique itemId to transfer. Each recipient will receive the same quantities of items provided. (required).</param>
        </member>
        <member name="M:Org.MetaFab.Model.BatchTransferCollectionItemsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BatchTransferCollectionItemsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BatchTransferCollectionItemsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BatchTransferCollectionItemsRequest.Equals(Org.MetaFab.Model.BatchTransferCollectionItemsRequest)">
            <summary>
            Returns true if BatchTransferCollectionItemsRequest instances are equal
            </summary>
            <param name="input">Instance of BatchTransferCollectionItemsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BatchTransferCollectionItemsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BatchTransferCollectionItemsRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.BatchTransferCollectionItemsRequest.Addresses">
            <summary>
            An array of valid EVM based addresses to transfer items to.
            </summary>
            <value>An array of valid EVM based addresses to transfer items to.</value>
        </member>
        <member name="P:Org.MetaFab.Model.BatchTransferCollectionItemsRequest.WalletIds">
            <summary>
            An array of wallet ids within the MetaFab ecosystem to transfer items to.
            </summary>
            <value>An array of wallet ids within the MetaFab ecosystem to transfer items to.</value>
        </member>
        <member name="P:Org.MetaFab.Model.BatchTransferCollectionItemsRequest.ItemIds">
            <summary>
            An array of unique itemIds to transfer. Each recipient will receive the same set of items provided.
            </summary>
            <value>An array of unique itemIds to transfer. Each recipient will receive the same set of items provided.</value>
        </member>
        <member name="P:Org.MetaFab.Model.BatchTransferCollectionItemsRequest.Quantities">
            <summary>
            The quantities of each unique itemId to transfer. Each recipient will receive the same quantities of items provided.
            </summary>
            <value>The quantities of each unique itemId to transfer. Each recipient will receive the same quantities of items provided.</value>
        </member>
        <member name="T:Org.MetaFab.Model.BatchTransferCurrencyRequest">
            <summary>
            BatchTransferCurrencyRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.BatchTransferCurrencyRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.BatchTransferCurrencyRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.BatchTransferCurrencyRequest.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Decimal},System.Collections.Generic.List{System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.BatchTransferCurrencyRequest"/> class.
            </summary>
            <param name="addresses">An array of valid EVM based addresses to transfer currency to..</param>
            <param name="walletIds">An array of wallet ids within the MetaFab ecosystem to transfer currency to..</param>
            <param name="amounts">An array of currency amounts to transfer. Ordering corresponds to the ordering of provided `addresses` and/or `walletIds`. If both `addresses` and `walletIds` are provided, `addresses` are first in the order. (required).</param>
            <param name="references">An optional array of uint256 numbers to reference each transfer in the batch. Ordering corresponds to the ordering of provided `addresses` or `walletIds`. If both `addresses` and `walletIds` are provided, `addresses` are first in the order..</param>
        </member>
        <member name="M:Org.MetaFab.Model.BatchTransferCurrencyRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BatchTransferCurrencyRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BatchTransferCurrencyRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BatchTransferCurrencyRequest.Equals(Org.MetaFab.Model.BatchTransferCurrencyRequest)">
            <summary>
            Returns true if BatchTransferCurrencyRequest instances are equal
            </summary>
            <param name="input">Instance of BatchTransferCurrencyRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BatchTransferCurrencyRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BatchTransferCurrencyRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.BatchTransferCurrencyRequest.Addresses">
            <summary>
            An array of valid EVM based addresses to transfer currency to.
            </summary>
            <value>An array of valid EVM based addresses to transfer currency to.</value>
        </member>
        <member name="P:Org.MetaFab.Model.BatchTransferCurrencyRequest.WalletIds">
            <summary>
            An array of wallet ids within the MetaFab ecosystem to transfer currency to.
            </summary>
            <value>An array of wallet ids within the MetaFab ecosystem to transfer currency to.</value>
        </member>
        <member name="P:Org.MetaFab.Model.BatchTransferCurrencyRequest.Amounts">
            <summary>
            An array of currency amounts to transfer. Ordering corresponds to the ordering of provided &#x60;addresses&#x60; and/or &#x60;walletIds&#x60;. If both &#x60;addresses&#x60; and &#x60;walletIds&#x60; are provided, &#x60;addresses&#x60; are first in the order.
            </summary>
            <value>An array of currency amounts to transfer. Ordering corresponds to the ordering of provided &#x60;addresses&#x60; and/or &#x60;walletIds&#x60;. If both &#x60;addresses&#x60; and &#x60;walletIds&#x60; are provided, &#x60;addresses&#x60; are first in the order.</value>
        </member>
        <member name="P:Org.MetaFab.Model.BatchTransferCurrencyRequest.References">
            <summary>
            An optional array of uint256 numbers to reference each transfer in the batch. Ordering corresponds to the ordering of provided &#x60;addresses&#x60; or &#x60;walletIds&#x60;. If both &#x60;addresses&#x60; and &#x60;walletIds&#x60; are provided, &#x60;addresses&#x60; are first in the order.
            </summary>
            <value>An optional array of uint256 numbers to reference each transfer in the batch. Ordering corresponds to the ordering of provided &#x60;addresses&#x60; or &#x60;walletIds&#x60;. If both &#x60;addresses&#x60; and &#x60;walletIds&#x60; are provided, &#x60;addresses&#x60; are first in the order.</value>
        </member>
        <member name="T:Org.MetaFab.Model.BurnCollectionItemRequest">
            <summary>
            BurnCollectionItemRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.BurnCollectionItemRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.BurnCollectionItemRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.BurnCollectionItemRequest.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.BurnCollectionItemRequest"/> class.
            </summary>
            <param name="quantity">The quantity of the collectionItemId to burn. (required).</param>
        </member>
        <member name="M:Org.MetaFab.Model.BurnCollectionItemRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BurnCollectionItemRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BurnCollectionItemRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BurnCollectionItemRequest.Equals(Org.MetaFab.Model.BurnCollectionItemRequest)">
            <summary>
            Returns true if BurnCollectionItemRequest instances are equal
            </summary>
            <param name="input">Instance of BurnCollectionItemRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BurnCollectionItemRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BurnCollectionItemRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.BurnCollectionItemRequest.Quantity">
            <summary>
            The quantity of the collectionItemId to burn.
            </summary>
            <value>The quantity of the collectionItemId to burn.</value>
        </member>
        <member name="T:Org.MetaFab.Model.BurnCurrencyRequest">
            <summary>
            BurnCurrencyRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.BurnCurrencyRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.BurnCurrencyRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.BurnCurrencyRequest.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.BurnCurrencyRequest"/> class.
            </summary>
            <param name="amount">The amount of currency to remove (burn). The currency balance of the authenticating game or player's wallet must be equal to or greater than this amount. (required).</param>
        </member>
        <member name="M:Org.MetaFab.Model.BurnCurrencyRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BurnCurrencyRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BurnCurrencyRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BurnCurrencyRequest.Equals(Org.MetaFab.Model.BurnCurrencyRequest)">
            <summary>
            Returns true if BurnCurrencyRequest instances are equal
            </summary>
            <param name="input">Instance of BurnCurrencyRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BurnCurrencyRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.BurnCurrencyRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.BurnCurrencyRequest.Amount">
            <summary>
            The amount of currency to remove (burn). The currency balance of the authenticating game or player&#39;s wallet must be equal to or greater than this amount.
            </summary>
            <value>The amount of currency to remove (burn). The currency balance of the authenticating game or player&#39;s wallet must be equal to or greater than this amount.</value>
        </member>
        <member name="T:Org.MetaFab.Model.CollectionModel">
            <summary>
            CollectionModel
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CollectionModel.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CollectionModel"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="gameId">This field has not had a description added..</param>
            <param name="contractId">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
        </member>
        <member name="M:Org.MetaFab.Model.CollectionModel.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CollectionModel.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CollectionModel.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CollectionModel.Equals(Org.MetaFab.Model.CollectionModel)">
            <summary>
            Returns true if CollectionModel instances are equal
            </summary>
            <param name="input">Instance of CollectionModel to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CollectionModel.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CollectionModel.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CollectionModel.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CollectionModel.GameId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CollectionModel.ContractId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CollectionModel.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CollectionModel.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="T:Org.MetaFab.Model.ContractModel">
            <summary>
            ContractModel
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.ContractModel.#ctor(System.String,System.String,System.String,System.Object,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.ContractModel"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="gameId">This field has not had a description added..</param>
            <param name="chain">This field has not had a description added..</param>
            <param name="abi">This field has not had a description added..</param>
            <param name="type">This field has not had a description added..</param>
            <param name="address">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
        </member>
        <member name="M:Org.MetaFab.Model.ContractModel.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.ContractModel.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.ContractModel.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.ContractModel.Equals(Org.MetaFab.Model.ContractModel)">
            <summary>
            Returns true if ContractModel instances are equal
            </summary>
            <param name="input">Instance of ContractModel to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.ContractModel.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.ContractModel.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.ContractModel.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ContractModel.GameId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ContractModel.Chain">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ContractModel.Abi">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ContractModel.Type">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ContractModel.Address">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ContractModel.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ContractModel.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="T:Org.MetaFab.Model.CreateCollection200Response">
            <summary>
            CreateCollection200Response
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200Response.#ctor(System.String,System.String,System.String,System.String,System.String,Org.MetaFab.Model.CreateCollection200ResponseAllOfContract)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateCollection200Response"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="gameId">This field has not had a description added..</param>
            <param name="contractId">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
            <param name="contract">contract.</param>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200Response.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200Response.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200Response.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200Response.Equals(Org.MetaFab.Model.CreateCollection200Response)">
            <summary>
            Returns true if CreateCollection200Response instances are equal
            </summary>
            <param name="input">Instance of CreateCollection200Response to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200Response.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200Response.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollection200Response.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollection200Response.GameId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollection200Response.ContractId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollection200Response.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollection200Response.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollection200Response.Contract">
            <summary>
            Gets or Sets Contract
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.CreateCollection200ResponseAllOf">
            <summary>
            CreateCollection200ResponseAllOf
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOf.#ctor(Org.MetaFab.Model.CreateCollection200ResponseAllOfContract)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateCollection200ResponseAllOf"/> class.
            </summary>
            <param name="contract">contract.</param>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOf.Equals(Org.MetaFab.Model.CreateCollection200ResponseAllOf)">
            <summary>
            Returns true if CreateCollection200ResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of CreateCollection200ResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollection200ResponseAllOf.Contract">
            <summary>
            Gets or Sets Contract
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract">
            <summary>
            CreateCollection200ResponseAllOfContract
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract.#ctor(System.String,System.String,System.String,System.Object,System.String,System.String,System.String,System.String,System.Collections.Generic.List{Org.MetaFab.Model.TransactionModel})">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="gameId">This field has not had a description added..</param>
            <param name="chain">This field has not had a description added..</param>
            <param name="abi">This field has not had a description added..</param>
            <param name="type">This field has not had a description added..</param>
            <param name="address">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
            <param name="transactions">transactions.</param>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract.Equals(Org.MetaFab.Model.CreateCollection200ResponseAllOfContract)">
            <summary>
            Returns true if CreateCollection200ResponseAllOfContract instances are equal
            </summary>
            <param name="input">Instance of CreateCollection200ResponseAllOfContract to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract.GameId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract.Chain">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract.Abi">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract.Type">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract.Address">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollection200ResponseAllOfContract.Transactions">
            <summary>
            Gets or Sets Transactions
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.CreateCollection200ResponseAllOfContractAllOf">
            <summary>
            CreateCollection200ResponseAllOfContractAllOf
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOfContractAllOf.#ctor(System.Collections.Generic.List{Org.MetaFab.Model.TransactionModel})">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateCollection200ResponseAllOfContractAllOf"/> class.
            </summary>
            <param name="transactions">transactions.</param>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOfContractAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOfContractAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOfContractAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOfContractAllOf.Equals(Org.MetaFab.Model.CreateCollection200ResponseAllOfContractAllOf)">
            <summary>
            Returns true if CreateCollection200ResponseAllOfContractAllOf instances are equal
            </summary>
            <param name="input">Instance of CreateCollection200ResponseAllOfContractAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOfContractAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollection200ResponseAllOfContractAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollection200ResponseAllOfContractAllOf.Transactions">
            <summary>
            Gets or Sets Transactions
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.CreateCollectionItemRequest">
            <summary>
            CreateCollectionItemRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateCollectionItemRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequest.#ctor(System.Decimal,System.String,System.String,System.Byte[],System.String,System.String,System.Collections.Generic.List{Org.MetaFab.Model.CreateCollectionItemRequestAttributesInner},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateCollectionItemRequest"/> class.
            </summary>
            <param name="id">A unique itemId to use for this item within the collection. If an existing itemId is used, the current metadata will be overriden. Any number may be used.  The terms `itemId` and `collectionItemId` are used interchangeably and equivalent to one another throughout MetaFab documentation. (required).</param>
            <param name="name">The name of this item. (required).</param>
            <param name="description">A text description of this item. This is a great spot to include lore, game mechanics and more related to this item. (required).</param>
            <param name="imageBase64">A base64 string of the image for this item. Either `imageBase64` or `imageUrl` must be provided. Supported image formats are `jpg`, `jpeg`, `png`, `gif`. Recommended size of 1:1 aspect ratio and no more than 1500x1500 pixels..</param>
            <param name="imageUrl">An external url that resolves to an image to use for this item. This can also be set to an ipfs:// uri. Recommended size of 1:1 aspect ratio and no more than 1500x1500 pixels..</param>
            <param name="externalUrl">An optional URL where players can go to learn more about this item specifically, or your game, or any other link..</param>
            <param name="attributes">An array of objects that conform with the [metadata attributes standard that can be found here](https://docs.opensea.io/docs/metadata-standards#attributes).</param>
            <param name="data">An arbitrary object of data attached to the top level metadata object. This is useful for including data or resource URLs specific to your game. Such as URLs that point to 3D models, music files, bitmaps, or anything else you need to reference..</param>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequest.Equals(Org.MetaFab.Model.CreateCollectionItemRequest)">
            <summary>
            Returns true if CreateCollectionItemRequest instances are equal
            </summary>
            <param name="input">Instance of CreateCollectionItemRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollectionItemRequest.Id">
            <summary>
            A unique itemId to use for this item within the collection. If an existing itemId is used, the current metadata will be overriden. Any number may be used.  The terms &#x60;itemId&#x60; and &#x60;collectionItemId&#x60; are used interchangeably and equivalent to one another throughout MetaFab documentation.
            </summary>
            <value>A unique itemId to use for this item within the collection. If an existing itemId is used, the current metadata will be overriden. Any number may be used.  The terms &#x60;itemId&#x60; and &#x60;collectionItemId&#x60; are used interchangeably and equivalent to one another throughout MetaFab documentation.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollectionItemRequest.Name">
            <summary>
            The name of this item.
            </summary>
            <value>The name of this item.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollectionItemRequest.Description">
            <summary>
            A text description of this item. This is a great spot to include lore, game mechanics and more related to this item.
            </summary>
            <value>A text description of this item. This is a great spot to include lore, game mechanics and more related to this item.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollectionItemRequest.ImageBase64">
            <summary>
            A base64 string of the image for this item. Either &#x60;imageBase64&#x60; or &#x60;imageUrl&#x60; must be provided. Supported image formats are &#x60;jpg&#x60;, &#x60;jpeg&#x60;, &#x60;png&#x60;, &#x60;gif&#x60;. Recommended size of 1:1 aspect ratio and no more than 1500x1500 pixels.
            </summary>
            <value>A base64 string of the image for this item. Either &#x60;imageBase64&#x60; or &#x60;imageUrl&#x60; must be provided. Supported image formats are &#x60;jpg&#x60;, &#x60;jpeg&#x60;, &#x60;png&#x60;, &#x60;gif&#x60;. Recommended size of 1:1 aspect ratio and no more than 1500x1500 pixels.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollectionItemRequest.ImageUrl">
            <summary>
            An external url that resolves to an image to use for this item. This can also be set to an ipfs:// uri. Recommended size of 1:1 aspect ratio and no more than 1500x1500 pixels.
            </summary>
            <value>An external url that resolves to an image to use for this item. This can also be set to an ipfs:// uri. Recommended size of 1:1 aspect ratio and no more than 1500x1500 pixels.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollectionItemRequest.ExternalUrl">
            <summary>
            An optional URL where players can go to learn more about this item specifically, or your game, or any other link.
            </summary>
            <value>An optional URL where players can go to learn more about this item specifically, or your game, or any other link.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollectionItemRequest.Attributes">
            <summary>
            An array of objects that conform with the [metadata attributes standard that can be found here](https://docs.opensea.io/docs/metadata-standards#attributes)
            </summary>
            <value>An array of objects that conform with the [metadata attributes standard that can be found here](https://docs.opensea.io/docs/metadata-standards#attributes)</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollectionItemRequest.Data">
            <summary>
            An arbitrary object of data attached to the top level metadata object. This is useful for including data or resource URLs specific to your game. Such as URLs that point to 3D models, music files, bitmaps, or anything else you need to reference.
            </summary>
            <value>An arbitrary object of data attached to the top level metadata object. This is useful for including data or resource URLs specific to your game. Such as URLs that point to 3D models, music files, bitmaps, or anything else you need to reference.</value>
        </member>
        <member name="T:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInner">
            <summary>
            CreateCollectionItemRequestAttributesInner
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInner"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInner.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInner"/> class.
            </summary>
            <param name="traitType">traitType (required).</param>
            <param name="value">value (required).</param>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInner.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInner.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInner.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInner.Equals(Org.MetaFab.Model.CreateCollectionItemRequestAttributesInner)">
            <summary>
            Returns true if CreateCollectionItemRequestAttributesInner instances are equal
            </summary>
            <param name="input">Instance of CreateCollectionItemRequestAttributesInner to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInner.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInner.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInner.TraitType">
            <summary>
            Gets or Sets TraitType
            </summary>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInner.Value">
            <summary>
            Gets or Sets Value
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInnerValue">
            <summary>
            CreateCollectionItemRequestAttributesInnerValue
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInnerValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInnerValue"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInnerValue.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInnerValue.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInnerValue.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInnerValue.Equals(Org.MetaFab.Model.CreateCollectionItemRequestAttributesInnerValue)">
            <summary>
            Returns true if CreateCollectionItemRequestAttributesInnerValue instances are equal
            </summary>
            <param name="input">Instance of CreateCollectionItemRequestAttributesInnerValue to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInnerValue.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionItemRequestAttributesInnerValue.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Org.MetaFab.Model.CreateCollectionRequest">
            <summary>
            CreateCollectionRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateCollectionRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionRequest.#ctor(Org.MetaFab.Model.CreateCollectionRequest.ChainEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateCollectionRequest"/> class.
            </summary>
            <param name="chain">The blockchain you want to deploy this item collection on. Support for new blockchains are added over time. (required).</param>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionRequest.Equals(Org.MetaFab.Model.CreateCollectionRequest)">
            <summary>
            Returns true if CreateCollectionRequest instances are equal
            </summary>
            <param name="input">Instance of CreateCollectionRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCollectionRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCollectionRequest.Chain">
            <summary>
            The blockchain you want to deploy this item collection on. Support for new blockchains are added over time.
            </summary>
            <value>The blockchain you want to deploy this item collection on. Support for new blockchains are added over time.</value>
        </member>
        <member name="T:Org.MetaFab.Model.CreateCollectionRequest.ChainEnum">
            <summary>
            The blockchain you want to deploy this item collection on. Support for new blockchains are added over time.
            </summary>
            <value>The blockchain you want to deploy this item collection on. Support for new blockchains are added over time.</value>
        </member>
        <member name="F:Org.MetaFab.Model.CreateCollectionRequest.ChainEnum.ETHEREUM">
            <summary>
            Enum ETHEREUM for value: ETHEREUM
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateCollectionRequest.ChainEnum.GOERLI">
            <summary>
            Enum GOERLI for value: GOERLI
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateCollectionRequest.ChainEnum.MATIC">
            <summary>
            Enum MATIC for value: MATIC
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateCollectionRequest.ChainEnum.MATICMUMBAI">
            <summary>
            Enum MATICMUMBAI for value: MATICMUMBAI
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateCollectionRequest.ChainEnum.ARBITRUM">
            <summary>
            Enum ARBITRUM for value: ARBITRUM
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateCollectionRequest.ChainEnum.ARBITRUMGOERLI">
            <summary>
            Enum ARBITRUMGOERLI for value: ARBITRUMGOERLI
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.CreateContractRequest">
            <summary>
            CreateContractRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateContractRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateContractRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateContractRequest.#ctor(System.String,System.String,Org.MetaFab.Model.CreateContractRequest.ChainEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateContractRequest"/> class.
            </summary>
            <param name="address">The address of the existing contract. (required).</param>
            <param name="abi">JSON of the abi. (required).</param>
            <param name="chain">The blockchain you want to deploy this currency on. Support for new blockchains are added over time. (required).</param>
        </member>
        <member name="M:Org.MetaFab.Model.CreateContractRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateContractRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateContractRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateContractRequest.Equals(Org.MetaFab.Model.CreateContractRequest)">
            <summary>
            Returns true if CreateContractRequest instances are equal
            </summary>
            <param name="input">Instance of CreateContractRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateContractRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateContractRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CreateContractRequest.Chain">
            <summary>
            The blockchain you want to deploy this currency on. Support for new blockchains are added over time.
            </summary>
            <value>The blockchain you want to deploy this currency on. Support for new blockchains are added over time.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateContractRequest.Address">
            <summary>
            The address of the existing contract.
            </summary>
            <value>The address of the existing contract.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateContractRequest.Abi">
            <summary>
            JSON of the abi.
            </summary>
            <value>JSON of the abi.</value>
        </member>
        <member name="T:Org.MetaFab.Model.CreateContractRequest.ChainEnum">
            <summary>
            The blockchain you want to deploy this currency on. Support for new blockchains are added over time.
            </summary>
            <value>The blockchain you want to deploy this currency on. Support for new blockchains are added over time.</value>
        </member>
        <member name="F:Org.MetaFab.Model.CreateContractRequest.ChainEnum.ETHEREUM">
            <summary>
            Enum ETHEREUM for value: ETHEREUM
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateContractRequest.ChainEnum.GOERLI">
            <summary>
            Enum GOERLI for value: GOERLI
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateContractRequest.ChainEnum.MATIC">
            <summary>
            Enum MATIC for value: MATIC
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateContractRequest.ChainEnum.MATICMUMBAI">
            <summary>
            Enum MATICMUMBAI for value: MATICMUMBAI
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateContractRequest.ChainEnum.ARBITRUM">
            <summary>
            Enum ARBITRUM for value: ARBITRUM
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateContractRequest.ChainEnum.ARBITRUMGOERLI">
            <summary>
            Enum ARBITRUMGOERLI for value: ARBITRUMGOERLI
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.CreateCurrency200Response">
            <summary>
            CreateCurrency200Response
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200Response.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,Org.MetaFab.Model.CreateCollection200ResponseAllOfContract)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateCurrency200Response"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="gameId">This field has not had a description added..</param>
            <param name="contractId">This field has not had a description added..</param>
            <param name="name">This field has not had a description added..</param>
            <param name="symbol">This field has not had a description added..</param>
            <param name="supplyCap">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
            <param name="contract">contract.</param>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200Response.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200Response.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200Response.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200Response.Equals(Org.MetaFab.Model.CreateCurrency200Response)">
            <summary>
            Returns true if CreateCurrency200Response instances are equal
            </summary>
            <param name="input">Instance of CreateCurrency200Response to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200Response.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200Response.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200Response.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200Response.GameId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200Response.ContractId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200Response.Name">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200Response.Symbol">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200Response.SupplyCap">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200Response.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200Response.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200Response.Contract">
            <summary>
            Gets or Sets Contract
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.CreateCurrency200ResponseAllOf">
            <summary>
            CreateCurrency200ResponseAllOf
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOf.#ctor(Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateCurrency200ResponseAllOf"/> class.
            </summary>
            <param name="contract">contract.</param>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOf.Equals(Org.MetaFab.Model.CreateCurrency200ResponseAllOf)">
            <summary>
            Returns true if CreateCurrency200ResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of CreateCurrency200ResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200ResponseAllOf.Contract">
            <summary>
            Gets or Sets Contract
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract">
            <summary>
            CreateCurrency200ResponseAllOfContract
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract.#ctor(System.String,System.String,System.String,System.Object,System.String,System.String,System.String,System.String,System.Collections.Generic.List{Org.MetaFab.Model.TransactionModel})">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="gameId">This field has not had a description added..</param>
            <param name="chain">This field has not had a description added..</param>
            <param name="abi">This field has not had a description added..</param>
            <param name="type">This field has not had a description added..</param>
            <param name="address">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
            <param name="transactions">transactions.</param>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract.Equals(Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract)">
            <summary>
            Returns true if CreateCurrency200ResponseAllOfContract instances are equal
            </summary>
            <param name="input">Instance of CreateCurrency200ResponseAllOfContract to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract.GameId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract.Chain">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract.Abi">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract.Type">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract.Address">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContract.Transactions">
            <summary>
            Gets or Sets Transactions
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContractAllOf">
            <summary>
            CreateCurrency200ResponseAllOfContractAllOf
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContractAllOf.#ctor(System.Collections.Generic.List{Org.MetaFab.Model.TransactionModel})">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContractAllOf"/> class.
            </summary>
            <param name="transactions">transactions.</param>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContractAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContractAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContractAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContractAllOf.Equals(Org.MetaFab.Model.CreateCurrency200ResponseAllOfContractAllOf)">
            <summary>
            Returns true if CreateCurrency200ResponseAllOfContractAllOf instances are equal
            </summary>
            <param name="input">Instance of CreateCurrency200ResponseAllOfContractAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContractAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContractAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrency200ResponseAllOfContractAllOf.Transactions">
            <summary>
            Gets or Sets Transactions
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.CreateCurrencyRequest">
            <summary>
            CreateCurrencyRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrencyRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateCurrencyRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrencyRequest.#ctor(System.String,System.String,System.Decimal,Org.MetaFab.Model.CreateCurrencyRequest.ChainEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateCurrencyRequest"/> class.
            </summary>
            <param name="name">The name of this currency. This can be anything, such as `Bright Gems`, `Gold`, etc. (required).</param>
            <param name="symbol">The shorthand symbol to represent this currency. This can be anything, such as `BGEM`, `GLD`, etc. (required).</param>
            <param name="supplyCap">The maximum amount of this currency that can ever exist. Use `0` if you do not want this currency to have a maximum supply. (required).</param>
            <param name="chain">The blockchain you want to deploy this currency on. Support for new blockchains are added over time. (required).</param>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrencyRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrencyRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrencyRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrencyRequest.Equals(Org.MetaFab.Model.CreateCurrencyRequest)">
            <summary>
            Returns true if CreateCurrencyRequest instances are equal
            </summary>
            <param name="input">Instance of CreateCurrencyRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrencyRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateCurrencyRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrencyRequest.Chain">
            <summary>
            The blockchain you want to deploy this currency on. Support for new blockchains are added over time.
            </summary>
            <value>The blockchain you want to deploy this currency on. Support for new blockchains are added over time.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrencyRequest.Name">
            <summary>
            The name of this currency. This can be anything, such as &#x60;Bright Gems&#x60;, &#x60;Gold&#x60;, etc.
            </summary>
            <value>The name of this currency. This can be anything, such as &#x60;Bright Gems&#x60;, &#x60;Gold&#x60;, etc.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrencyRequest.Symbol">
            <summary>
            The shorthand symbol to represent this currency. This can be anything, such as &#x60;BGEM&#x60;, &#x60;GLD&#x60;, etc.
            </summary>
            <value>The shorthand symbol to represent this currency. This can be anything, such as &#x60;BGEM&#x60;, &#x60;GLD&#x60;, etc.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateCurrencyRequest.SupplyCap">
            <summary>
            The maximum amount of this currency that can ever exist. Use &#x60;0&#x60; if you do not want this currency to have a maximum supply.
            </summary>
            <value>The maximum amount of this currency that can ever exist. Use &#x60;0&#x60; if you do not want this currency to have a maximum supply.</value>
        </member>
        <member name="T:Org.MetaFab.Model.CreateCurrencyRequest.ChainEnum">
            <summary>
            The blockchain you want to deploy this currency on. Support for new blockchains are added over time.
            </summary>
            <value>The blockchain you want to deploy this currency on. Support for new blockchains are added over time.</value>
        </member>
        <member name="F:Org.MetaFab.Model.CreateCurrencyRequest.ChainEnum.ETHEREUM">
            <summary>
            Enum ETHEREUM for value: ETHEREUM
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateCurrencyRequest.ChainEnum.GOERLI">
            <summary>
            Enum GOERLI for value: GOERLI
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateCurrencyRequest.ChainEnum.MATIC">
            <summary>
            Enum MATIC for value: MATIC
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateCurrencyRequest.ChainEnum.MATICMUMBAI">
            <summary>
            Enum MATICMUMBAI for value: MATICMUMBAI
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateCurrencyRequest.ChainEnum.ARBITRUM">
            <summary>
            Enum ARBITRUM for value: ARBITRUM
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateCurrencyRequest.ChainEnum.ARBITRUMGOERLI">
            <summary>
            Enum ARBITRUMGOERLI for value: ARBITRUMGOERLI
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.CreateExchange200Response">
            <summary>
            CreateExchange200Response
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateExchange200Response.#ctor(System.String,System.String,System.String,System.String,System.String,Org.MetaFab.Model.CreateCollection200ResponseAllOfContract)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateExchange200Response"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="gameId">This field has not had a description added..</param>
            <param name="contractId">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
            <param name="contract">contract.</param>
        </member>
        <member name="M:Org.MetaFab.Model.CreateExchange200Response.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateExchange200Response.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateExchange200Response.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateExchange200Response.Equals(Org.MetaFab.Model.CreateExchange200Response)">
            <summary>
            Returns true if CreateExchange200Response instances are equal
            </summary>
            <param name="input">Instance of CreateExchange200Response to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateExchange200Response.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateExchange200Response.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CreateExchange200Response.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateExchange200Response.GameId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateExchange200Response.ContractId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateExchange200Response.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateExchange200Response.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateExchange200Response.Contract">
            <summary>
            Gets or Sets Contract
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.CreateExchangeRequest">
            <summary>
            CreateExchangeRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateExchangeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateExchangeRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateExchangeRequest.#ctor(Org.MetaFab.Model.CreateExchangeRequest.ChainEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateExchangeRequest"/> class.
            </summary>
            <param name="chain">The blockchain you want to deploy this exchange on. Support for new blockchains are added over time. (required).</param>
        </member>
        <member name="M:Org.MetaFab.Model.CreateExchangeRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateExchangeRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateExchangeRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateExchangeRequest.Equals(Org.MetaFab.Model.CreateExchangeRequest)">
            <summary>
            Returns true if CreateExchangeRequest instances are equal
            </summary>
            <param name="input">Instance of CreateExchangeRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateExchangeRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateExchangeRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CreateExchangeRequest.Chain">
            <summary>
            The blockchain you want to deploy this exchange on. Support for new blockchains are added over time.
            </summary>
            <value>The blockchain you want to deploy this exchange on. Support for new blockchains are added over time.</value>
        </member>
        <member name="T:Org.MetaFab.Model.CreateExchangeRequest.ChainEnum">
            <summary>
            The blockchain you want to deploy this exchange on. Support for new blockchains are added over time.
            </summary>
            <value>The blockchain you want to deploy this exchange on. Support for new blockchains are added over time.</value>
        </member>
        <member name="F:Org.MetaFab.Model.CreateExchangeRequest.ChainEnum.ETHEREUM">
            <summary>
            Enum ETHEREUM for value: ETHEREUM
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateExchangeRequest.ChainEnum.GOERLI">
            <summary>
            Enum GOERLI for value: GOERLI
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateExchangeRequest.ChainEnum.MATIC">
            <summary>
            Enum MATIC for value: MATIC
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateExchangeRequest.ChainEnum.MATICMUMBAI">
            <summary>
            Enum MATICMUMBAI for value: MATICMUMBAI
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateExchangeRequest.ChainEnum.ARBITRUM">
            <summary>
            Enum ARBITRUM for value: ARBITRUM
            </summary>
        </member>
        <member name="F:Org.MetaFab.Model.CreateExchangeRequest.ChainEnum.ARBITRUMGOERLI">
            <summary>
            Enum ARBITRUMGOERLI for value: ARBITRUMGOERLI
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.CreateGameRequest">
            <summary>
            CreateGameRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateGameRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateGameRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreateGameRequest.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreateGameRequest"/> class.
            </summary>
            <param name="name">The name of the game you're creating. (required).</param>
            <param name="email">The email address associated with this game and used to login/authenticate as the game. (required).</param>
            <param name="password">The password to authenticate as the game. Additionally, this password is used to encrypt/decrypt your game's primary wallet and must be provided anytime this game makes blockchain interactions through various endpoints. (required).</param>
        </member>
        <member name="M:Org.MetaFab.Model.CreateGameRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateGameRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateGameRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateGameRequest.Equals(Org.MetaFab.Model.CreateGameRequest)">
            <summary>
            Returns true if CreateGameRequest instances are equal
            </summary>
            <param name="input">Instance of CreateGameRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateGameRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreateGameRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CreateGameRequest.Name">
            <summary>
            The name of the game you&#39;re creating.
            </summary>
            <value>The name of the game you&#39;re creating.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateGameRequest.Email">
            <summary>
            The email address associated with this game and used to login/authenticate as the game.
            </summary>
            <value>The email address associated with this game and used to login/authenticate as the game.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreateGameRequest.Password">
            <summary>
            The password to authenticate as the game. Additionally, this password is used to encrypt/decrypt your game&#39;s primary wallet and must be provided anytime this game makes blockchain interactions through various endpoints.
            </summary>
            <value>The password to authenticate as the game. Additionally, this password is used to encrypt/decrypt your game&#39;s primary wallet and must be provided anytime this game makes blockchain interactions through various endpoints.</value>
        </member>
        <member name="T:Org.MetaFab.Model.CreatePlayerRequest">
            <summary>
            CreatePlayerRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreatePlayerRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreatePlayerRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CreatePlayerRequest.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CreatePlayerRequest"/> class.
            </summary>
            <param name="username">The players username, used to authenticate the player and if desired represent them in game. Usernames are unique. There cannot be 2 users with the same username created for a game. (required).</param>
            <param name="password">The password to authenticate as the player. Additionally, this password is used to encrypt/decrypt a player's primary wallet and must be provided anytime this player makes blockchain interactions through various endpoints. (required).</param>
        </member>
        <member name="M:Org.MetaFab.Model.CreatePlayerRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreatePlayerRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreatePlayerRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreatePlayerRequest.Equals(Org.MetaFab.Model.CreatePlayerRequest)">
            <summary>
            Returns true if CreatePlayerRequest instances are equal
            </summary>
            <param name="input">Instance of CreatePlayerRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreatePlayerRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CreatePlayerRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CreatePlayerRequest.Username">
            <summary>
            The players username, used to authenticate the player and if desired represent them in game. Usernames are unique. There cannot be 2 users with the same username created for a game.
            </summary>
            <value>The players username, used to authenticate the player and if desired represent them in game. Usernames are unique. There cannot be 2 users with the same username created for a game.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CreatePlayerRequest.Password">
            <summary>
            The password to authenticate as the player. Additionally, this password is used to encrypt/decrypt a player&#39;s primary wallet and must be provided anytime this player makes blockchain interactions through various endpoints.
            </summary>
            <value>The password to authenticate as the player. Additionally, this password is used to encrypt/decrypt a player&#39;s primary wallet and must be provided anytime this player makes blockchain interactions through various endpoints.</value>
        </member>
        <member name="T:Org.MetaFab.Model.CurrencyModel">
            <summary>
            CurrencyModel
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.CurrencyModel.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.CurrencyModel"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="gameId">This field has not had a description added..</param>
            <param name="contractId">This field has not had a description added..</param>
            <param name="name">This field has not had a description added..</param>
            <param name="symbol">This field has not had a description added..</param>
            <param name="supplyCap">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
        </member>
        <member name="M:Org.MetaFab.Model.CurrencyModel.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CurrencyModel.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CurrencyModel.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CurrencyModel.Equals(Org.MetaFab.Model.CurrencyModel)">
            <summary>
            Returns true if CurrencyModel instances are equal
            </summary>
            <param name="input">Instance of CurrencyModel to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CurrencyModel.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.CurrencyModel.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.CurrencyModel.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CurrencyModel.GameId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CurrencyModel.ContractId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CurrencyModel.Name">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CurrencyModel.Symbol">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CurrencyModel.SupplyCap">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CurrencyModel.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.CurrencyModel.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="T:Org.MetaFab.Model.ExchangeModel">
            <summary>
            ExchangeModel
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.ExchangeModel.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.ExchangeModel"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="gameId">This field has not had a description added..</param>
            <param name="contractId">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
        </member>
        <member name="M:Org.MetaFab.Model.ExchangeModel.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.ExchangeModel.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.ExchangeModel.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.ExchangeModel.Equals(Org.MetaFab.Model.ExchangeModel)">
            <summary>
            Returns true if ExchangeModel instances are equal
            </summary>
            <param name="input">Instance of ExchangeModel to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.ExchangeModel.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.ExchangeModel.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeModel.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeModel.GameId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeModel.ContractId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeModel.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeModel.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="T:Org.MetaFab.Model.ExchangeOffer">
            <summary>
            ExchangeOffer
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.ExchangeOffer.#ctor(System.Decimal,System.String,System.Collections.Generic.List{System.Decimal},System.Collections.Generic.List{System.Decimal},System.String,System.Decimal,System.String,System.Collections.Generic.List{System.Decimal},System.Collections.Generic.List{System.Decimal},System.String,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.ExchangeOffer"/> class.
            </summary>
            <param name="id">The id of this offer..</param>
            <param name="inputCollection">The address of the ERC1155 of MetaFab game items contract for input items required by this offer..</param>
            <param name="inputCollectionItemIds">An array of item ids from the input collection that are required for this offer..</param>
            <param name="inputCollectionItemAmounts">An array of amounts for each item id for the input collection that are required to use this offer..</param>
            <param name="inputCurrency">The address of the ERC20 or MetaFab game currency for the currency required by this offer..</param>
            <param name="inputCurrencyAmount">The amount of currency required by this offer..</param>
            <param name="outputCollection">The address of the ERC1155 of MetaFab game items contract for output items given by this offer..</param>
            <param name="outputCollectionItemIds">An array of item ids from the output collection that are given for this offer..</param>
            <param name="outputCollectionItemAmounts">An array of amounts for each item id for the output collection that are given by this offer..</param>
            <param name="outputCurrency">The address of the ERC20 or MetaFab game currency for the output currency given by this offer..</param>
            <param name="outputCurrencyAmount">The amount of currency given by this offer..</param>
            <param name="uses">The number of times this offer has been used..</param>
            <param name="maxUses">The maximum number of times this offer can be used. A value of `0` means there is no limit on how many times this offer can be used..</param>
            <param name="lastUpdatedAt">A unix timestamp in seconds that represents the last time this offer was set or updated..</param>
        </member>
        <member name="M:Org.MetaFab.Model.ExchangeOffer.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.ExchangeOffer.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.ExchangeOffer.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.ExchangeOffer.Equals(Org.MetaFab.Model.ExchangeOffer)">
            <summary>
            Returns true if ExchangeOffer instances are equal
            </summary>
            <param name="input">Instance of ExchangeOffer to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.ExchangeOffer.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.ExchangeOffer.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeOffer.Id">
            <summary>
            The id of this offer.
            </summary>
            <value>The id of this offer.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeOffer.InputCollection">
            <summary>
            The address of the ERC1155 of MetaFab game items contract for input items required by this offer.
            </summary>
            <value>The address of the ERC1155 of MetaFab game items contract for input items required by this offer.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeOffer.InputCollectionItemIds">
            <summary>
            An array of item ids from the input collection that are required for this offer.
            </summary>
            <value>An array of item ids from the input collection that are required for this offer.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeOffer.InputCollectionItemAmounts">
            <summary>
            An array of amounts for each item id for the input collection that are required to use this offer.
            </summary>
            <value>An array of amounts for each item id for the input collection that are required to use this offer.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeOffer.InputCurrency">
            <summary>
            The address of the ERC20 or MetaFab game currency for the currency required by this offer.
            </summary>
            <value>The address of the ERC20 or MetaFab game currency for the currency required by this offer.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeOffer.InputCurrencyAmount">
            <summary>
            The amount of currency required by this offer.
            </summary>
            <value>The amount of currency required by this offer.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeOffer.OutputCollection">
            <summary>
            The address of the ERC1155 of MetaFab game items contract for output items given by this offer.
            </summary>
            <value>The address of the ERC1155 of MetaFab game items contract for output items given by this offer.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeOffer.OutputCollectionItemIds">
            <summary>
            An array of item ids from the output collection that are given for this offer.
            </summary>
            <value>An array of item ids from the output collection that are given for this offer.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeOffer.OutputCollectionItemAmounts">
            <summary>
            An array of amounts for each item id for the output collection that are given by this offer.
            </summary>
            <value>An array of amounts for each item id for the output collection that are given by this offer.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeOffer.OutputCurrency">
            <summary>
            The address of the ERC20 or MetaFab game currency for the output currency given by this offer.
            </summary>
            <value>The address of the ERC20 or MetaFab game currency for the output currency given by this offer.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeOffer.OutputCurrencyAmount">
            <summary>
            The amount of currency given by this offer.
            </summary>
            <value>The amount of currency given by this offer.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeOffer.Uses">
            <summary>
            The number of times this offer has been used.
            </summary>
            <value>The number of times this offer has been used.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeOffer.MaxUses">
            <summary>
            The maximum number of times this offer can be used. A value of &#x60;0&#x60; means there is no limit on how many times this offer can be used.
            </summary>
            <value>The maximum number of times this offer can be used. A value of &#x60;0&#x60; means there is no limit on how many times this offer can be used.</value>
        </member>
        <member name="P:Org.MetaFab.Model.ExchangeOffer.LastUpdatedAt">
            <summary>
            A unix timestamp in seconds that represents the last time this offer was set or updated.
            </summary>
            <value>A unix timestamp in seconds that represents the last time this offer was set or updated.</value>
        </member>
        <member name="T:Org.MetaFab.Model.GameModel">
            <summary>
            GameModel
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.GameModel.#ctor(System.String,System.String,System.String,System.String,System.String,System.Object,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.GameModel"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="walletId">This field has not had a description added..</param>
            <param name="fundingWalletId">This field has not had a description added..</param>
            <param name="email">This field has not had a description added..</param>
            <param name="name">This field has not had a description added..</param>
            <param name="rpcs">This field has not had a description added..</param>
            <param name="publishedKey">This field has not had a description added..</param>
            <param name="secretKey">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
        </member>
        <member name="M:Org.MetaFab.Model.GameModel.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GameModel.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GameModel.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GameModel.Equals(Org.MetaFab.Model.GameModel)">
            <summary>
            Returns true if GameModel instances are equal
            </summary>
            <param name="input">Instance of GameModel to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GameModel.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GameModel.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.GameModel.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GameModel.WalletId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GameModel.FundingWalletId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GameModel.Email">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GameModel.Name">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GameModel.Rpcs">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GameModel.PublishedKey">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GameModel.SecretKey">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GameModel.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GameModel.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="T:Org.MetaFab.Model.GetCollections200ResponseInner">
            <summary>
            GetCollections200ResponseInner
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.GetCollections200ResponseInner.#ctor(System.String,System.String,System.String,System.String,System.String,Org.MetaFab.Model.CollectionModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.GetCollections200ResponseInner"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="gameId">This field has not had a description added..</param>
            <param name="contractId">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
            <param name="contract">contract.</param>
        </member>
        <member name="M:Org.MetaFab.Model.GetCollections200ResponseInner.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCollections200ResponseInner.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCollections200ResponseInner.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCollections200ResponseInner.Equals(Org.MetaFab.Model.GetCollections200ResponseInner)">
            <summary>
            Returns true if GetCollections200ResponseInner instances are equal
            </summary>
            <param name="input">Instance of GetCollections200ResponseInner to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCollections200ResponseInner.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCollections200ResponseInner.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.GetCollections200ResponseInner.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetCollections200ResponseInner.GameId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetCollections200ResponseInner.ContractId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetCollections200ResponseInner.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetCollections200ResponseInner.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetCollections200ResponseInner.Contract">
            <summary>
            Gets or Sets Contract
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.GetCollections200ResponseInnerAllOf">
            <summary>
            GetCollections200ResponseInnerAllOf
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.GetCollections200ResponseInnerAllOf.#ctor(Org.MetaFab.Model.CollectionModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.GetCollections200ResponseInnerAllOf"/> class.
            </summary>
            <param name="contract">contract.</param>
        </member>
        <member name="M:Org.MetaFab.Model.GetCollections200ResponseInnerAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCollections200ResponseInnerAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCollections200ResponseInnerAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCollections200ResponseInnerAllOf.Equals(Org.MetaFab.Model.GetCollections200ResponseInnerAllOf)">
            <summary>
            Returns true if GetCollections200ResponseInnerAllOf instances are equal
            </summary>
            <param name="input">Instance of GetCollections200ResponseInnerAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCollections200ResponseInnerAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCollections200ResponseInnerAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.GetCollections200ResponseInnerAllOf.Contract">
            <summary>
            Gets or Sets Contract
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.GetCurrencies200ResponseInner">
            <summary>
            GetCurrencies200ResponseInner
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencies200ResponseInner.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,Org.MetaFab.Model.ContractModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.GetCurrencies200ResponseInner"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="gameId">This field has not had a description added..</param>
            <param name="contractId">This field has not had a description added..</param>
            <param name="name">This field has not had a description added..</param>
            <param name="symbol">This field has not had a description added..</param>
            <param name="supplyCap">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
            <param name="contract">contract.</param>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencies200ResponseInner.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencies200ResponseInner.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencies200ResponseInner.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencies200ResponseInner.Equals(Org.MetaFab.Model.GetCurrencies200ResponseInner)">
            <summary>
            Returns true if GetCurrencies200ResponseInner instances are equal
            </summary>
            <param name="input">Instance of GetCurrencies200ResponseInner to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencies200ResponseInner.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencies200ResponseInner.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.GetCurrencies200ResponseInner.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetCurrencies200ResponseInner.GameId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetCurrencies200ResponseInner.ContractId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetCurrencies200ResponseInner.Name">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetCurrencies200ResponseInner.Symbol">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetCurrencies200ResponseInner.SupplyCap">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetCurrencies200ResponseInner.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetCurrencies200ResponseInner.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetCurrencies200ResponseInner.Contract">
            <summary>
            Gets or Sets Contract
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.GetCurrencies200ResponseInnerAllOf">
            <summary>
            GetCurrencies200ResponseInnerAllOf
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencies200ResponseInnerAllOf.#ctor(Org.MetaFab.Model.ContractModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.GetCurrencies200ResponseInnerAllOf"/> class.
            </summary>
            <param name="contract">contract.</param>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencies200ResponseInnerAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencies200ResponseInnerAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencies200ResponseInnerAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencies200ResponseInnerAllOf.Equals(Org.MetaFab.Model.GetCurrencies200ResponseInnerAllOf)">
            <summary>
            Returns true if GetCurrencies200ResponseInnerAllOf instances are equal
            </summary>
            <param name="input">Instance of GetCurrencies200ResponseInnerAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencies200ResponseInnerAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencies200ResponseInnerAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.GetCurrencies200ResponseInnerAllOf.Contract">
            <summary>
            Gets or Sets Contract
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.GetCurrencyFees200Response">
            <summary>
            GetCurrencyFees200Response
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencyFees200Response.#ctor(System.String,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.GetCurrencyFees200Response"/> class.
            </summary>
            <param name="recipientAddress">The wallet address that fees from all applicable transactions are automatically sent to..</param>
            <param name="basisPoints">The number of fee basis points. 100 basisPoints = 1% fee of the total transaction amount deducted from the total received by the recipient..</param>
            <param name="fixedAmount">The fixed number of currency as a fee regardless of the total transaction amount. 10 = 10 of the currency as a fee for any transaction, deducted from the total received by the recipient..</param>
            <param name="capAmount">The maximum combined fee between basisPoints and fixedAmount. If the total transaction fee is over this amount, the capAmount will be used as the transaction fee deducted from the total received by the recipient..</param>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencyFees200Response.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencyFees200Response.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencyFees200Response.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencyFees200Response.Equals(Org.MetaFab.Model.GetCurrencyFees200Response)">
            <summary>
            Returns true if GetCurrencyFees200Response instances are equal
            </summary>
            <param name="input">Instance of GetCurrencyFees200Response to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencyFees200Response.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetCurrencyFees200Response.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.GetCurrencyFees200Response.RecipientAddress">
            <summary>
            The wallet address that fees from all applicable transactions are automatically sent to.
            </summary>
            <value>The wallet address that fees from all applicable transactions are automatically sent to.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetCurrencyFees200Response.BasisPoints">
            <summary>
            The number of fee basis points. 100 basisPoints &#x3D; 1% fee of the total transaction amount deducted from the total received by the recipient.
            </summary>
            <value>The number of fee basis points. 100 basisPoints &#x3D; 1% fee of the total transaction amount deducted from the total received by the recipient.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetCurrencyFees200Response.FixedAmount">
            <summary>
            The fixed number of currency as a fee regardless of the total transaction amount. 10 &#x3D; 10 of the currency as a fee for any transaction, deducted from the total received by the recipient.
            </summary>
            <value>The fixed number of currency as a fee regardless of the total transaction amount. 10 &#x3D; 10 of the currency as a fee for any transaction, deducted from the total received by the recipient.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetCurrencyFees200Response.CapAmount">
            <summary>
            The maximum combined fee between basisPoints and fixedAmount. If the total transaction fee is over this amount, the capAmount will be used as the transaction fee deducted from the total received by the recipient.
            </summary>
            <value>The maximum combined fee between basisPoints and fixedAmount. If the total transaction fee is over this amount, the capAmount will be used as the transaction fee deducted from the total received by the recipient.</value>
        </member>
        <member name="T:Org.MetaFab.Model.GetExchanges200ResponseInner">
            <summary>
            GetExchanges200ResponseInner
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.GetExchanges200ResponseInner.#ctor(System.String,System.String,System.String,System.String,System.String,Org.MetaFab.Model.ContractModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.GetExchanges200ResponseInner"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="gameId">This field has not had a description added..</param>
            <param name="contractId">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
            <param name="contract">contract.</param>
        </member>
        <member name="M:Org.MetaFab.Model.GetExchanges200ResponseInner.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetExchanges200ResponseInner.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetExchanges200ResponseInner.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetExchanges200ResponseInner.Equals(Org.MetaFab.Model.GetExchanges200ResponseInner)">
            <summary>
            Returns true if GetExchanges200ResponseInner instances are equal
            </summary>
            <param name="input">Instance of GetExchanges200ResponseInner to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetExchanges200ResponseInner.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetExchanges200ResponseInner.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.GetExchanges200ResponseInner.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetExchanges200ResponseInner.GameId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetExchanges200ResponseInner.ContractId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetExchanges200ResponseInner.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetExchanges200ResponseInner.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GetExchanges200ResponseInner.Contract">
            <summary>
            Gets or Sets Contract
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.GetPlayerData200Response">
            <summary>
            GetPlayerData200Response
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.GetPlayerData200Response.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.GetPlayerData200Response"/> class.
            </summary>
            <param name="protectedData">protectedData.</param>
            <param name="publicData">publicData.</param>
        </member>
        <member name="M:Org.MetaFab.Model.GetPlayerData200Response.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetPlayerData200Response.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetPlayerData200Response.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetPlayerData200Response.Equals(Org.MetaFab.Model.GetPlayerData200Response)">
            <summary>
            Returns true if GetPlayerData200Response instances are equal
            </summary>
            <param name="input">Instance of GetPlayerData200Response to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetPlayerData200Response.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GetPlayerData200Response.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.GetPlayerData200Response.ProtectedData">
            <summary>
            Gets or Sets ProtectedData
            </summary>
        </member>
        <member name="P:Org.MetaFab.Model.GetPlayerData200Response.PublicData">
            <summary>
            Gets or Sets PublicData
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.GrantCollectionRoleRequest">
            <summary>
            GrantCollectionRoleRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.GrantCollectionRoleRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.GrantCollectionRoleRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.GrantCollectionRoleRequest.#ctor(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.GrantCollectionRoleRequest"/> class.
            </summary>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `minter` or `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7` (required).</param>
            <param name="address">A valid EVM based address grant the role to..</param>
            <param name="walletId">A wallet id within the MetaFab ecosystem to grant the role to..</param>
        </member>
        <member name="M:Org.MetaFab.Model.GrantCollectionRoleRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GrantCollectionRoleRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GrantCollectionRoleRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GrantCollectionRoleRequest.Equals(Org.MetaFab.Model.GrantCollectionRoleRequest)">
            <summary>
            Returns true if GrantCollectionRoleRequest instances are equal
            </summary>
            <param name="input">Instance of GrantCollectionRoleRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GrantCollectionRoleRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GrantCollectionRoleRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.GrantCollectionRoleRequest.Role">
            <summary>
            A valid MetaFab role or bytes string representing a role, such as &#x60;minter&#x60; or &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;
            </summary>
            <value>A valid MetaFab role or bytes string representing a role, such as &#x60;minter&#x60; or &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;</value>
        </member>
        <member name="P:Org.MetaFab.Model.GrantCollectionRoleRequest.Address">
            <summary>
            A valid EVM based address grant the role to.
            </summary>
            <value>A valid EVM based address grant the role to.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GrantCollectionRoleRequest.WalletId">
            <summary>
            A wallet id within the MetaFab ecosystem to grant the role to.
            </summary>
            <value>A wallet id within the MetaFab ecosystem to grant the role to.</value>
        </member>
        <member name="T:Org.MetaFab.Model.GrantCurrencyRoleRequest">
            <summary>
            GrantCurrencyRoleRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.GrantCurrencyRoleRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.GrantCurrencyRoleRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.GrantCurrencyRoleRequest.#ctor(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.GrantCurrencyRoleRequest"/> class.
            </summary>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `minter` or `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7` (required).</param>
            <param name="address">A valid EVM based address to grant the role to..</param>
            <param name="walletId">A wallet id within the MetaFab ecosystem to grant the role to..</param>
        </member>
        <member name="M:Org.MetaFab.Model.GrantCurrencyRoleRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GrantCurrencyRoleRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GrantCurrencyRoleRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GrantCurrencyRoleRequest.Equals(Org.MetaFab.Model.GrantCurrencyRoleRequest)">
            <summary>
            Returns true if GrantCurrencyRoleRequest instances are equal
            </summary>
            <param name="input">Instance of GrantCurrencyRoleRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GrantCurrencyRoleRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.GrantCurrencyRoleRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.GrantCurrencyRoleRequest.Role">
            <summary>
            A valid MetaFab role or bytes string representing a role, such as &#x60;minter&#x60; or &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;
            </summary>
            <value>A valid MetaFab role or bytes string representing a role, such as &#x60;minter&#x60; or &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;</value>
        </member>
        <member name="P:Org.MetaFab.Model.GrantCurrencyRoleRequest.Address">
            <summary>
            A valid EVM based address to grant the role to.
            </summary>
            <value>A valid EVM based address to grant the role to.</value>
        </member>
        <member name="P:Org.MetaFab.Model.GrantCurrencyRoleRequest.WalletId">
            <summary>
            A wallet id within the MetaFab ecosystem to grant the role to.
            </summary>
            <value>A wallet id within the MetaFab ecosystem to grant the role to.</value>
        </member>
        <member name="T:Org.MetaFab.Model.MintCollectionItemRequest">
            <summary>
            MintCollectionItemRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.MintCollectionItemRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.MintCollectionItemRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.MintCollectionItemRequest.#ctor(System.String,System.Decimal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.MintCollectionItemRequest"/> class.
            </summary>
            <param name="address">A valid EVM based address to create (mint) the item(s) for. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`..</param>
            <param name="quantity">The quantity of the specified item id to create (mint). (required).</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem to create (mint) the item(s) for..</param>
        </member>
        <member name="M:Org.MetaFab.Model.MintCollectionItemRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.MintCollectionItemRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.MintCollectionItemRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.MintCollectionItemRequest.Equals(Org.MetaFab.Model.MintCollectionItemRequest)">
            <summary>
            Returns true if MintCollectionItemRequest instances are equal
            </summary>
            <param name="input">Instance of MintCollectionItemRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.MintCollectionItemRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.MintCollectionItemRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.MintCollectionItemRequest.Address">
            <summary>
            A valid EVM based address to create (mint) the item(s) for. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.
            </summary>
            <value>A valid EVM based address to create (mint) the item(s) for. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.</value>
        </member>
        <member name="P:Org.MetaFab.Model.MintCollectionItemRequest.Quantity">
            <summary>
            The quantity of the specified item id to create (mint).
            </summary>
            <value>The quantity of the specified item id to create (mint).</value>
        </member>
        <member name="P:Org.MetaFab.Model.MintCollectionItemRequest.WalletId">
            <summary>
            Any wallet id within the MetaFab ecosystem to create (mint) the item(s) for.
            </summary>
            <value>Any wallet id within the MetaFab ecosystem to create (mint) the item(s) for.</value>
        </member>
        <member name="T:Org.MetaFab.Model.MintCurrencyRequest">
            <summary>
            MintCurrencyRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.MintCurrencyRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.MintCurrencyRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.MintCurrencyRequest.#ctor(System.Decimal,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.MintCurrencyRequest"/> class.
            </summary>
            <param name="amount">The amount of currency to create (mint). (required).</param>
            <param name="address">A valid EVM based address to create (mint) currency for. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`..</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem to create (mint) currency for..</param>
        </member>
        <member name="M:Org.MetaFab.Model.MintCurrencyRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.MintCurrencyRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.MintCurrencyRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.MintCurrencyRequest.Equals(Org.MetaFab.Model.MintCurrencyRequest)">
            <summary>
            Returns true if MintCurrencyRequest instances are equal
            </summary>
            <param name="input">Instance of MintCurrencyRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.MintCurrencyRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.MintCurrencyRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.MintCurrencyRequest.Amount">
            <summary>
            The amount of currency to create (mint).
            </summary>
            <value>The amount of currency to create (mint).</value>
        </member>
        <member name="P:Org.MetaFab.Model.MintCurrencyRequest.Address">
            <summary>
            A valid EVM based address to create (mint) currency for. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.
            </summary>
            <value>A valid EVM based address to create (mint) currency for. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.</value>
        </member>
        <member name="P:Org.MetaFab.Model.MintCurrencyRequest.WalletId">
            <summary>
            Any wallet id within the MetaFab ecosystem to create (mint) currency for.
            </summary>
            <value>Any wallet id within the MetaFab ecosystem to create (mint) currency for.</value>
        </member>
        <member name="T:Org.MetaFab.Model.PlayerModel">
            <summary>
            PlayerModel
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.PlayerModel.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.PlayerModel"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="gameId">This field has not had a description added..</param>
            <param name="walletId">This field has not had a description added..</param>
            <param name="username">This field has not had a description added..</param>
            <param name="accessToken">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
        </member>
        <member name="M:Org.MetaFab.Model.PlayerModel.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PlayerModel.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PlayerModel.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PlayerModel.Equals(Org.MetaFab.Model.PlayerModel)">
            <summary>
            Returns true if PlayerModel instances are equal
            </summary>
            <param name="input">Instance of PlayerModel to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PlayerModel.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PlayerModel.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.PlayerModel.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.PlayerModel.GameId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.PlayerModel.WalletId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.PlayerModel.Username">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.PlayerModel.AccessToken">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.PlayerModel.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.PlayerModel.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="T:Org.MetaFab.Model.PublicGame">
            <summary>
            PublicGame
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.PublicGame.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.PublicGame"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="name">This field has not had a description added..</param>
            <param name="publishedKey">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
        </member>
        <member name="M:Org.MetaFab.Model.PublicGame.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PublicGame.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PublicGame.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PublicGame.Equals(Org.MetaFab.Model.PublicGame)">
            <summary>
            Returns true if PublicGame instances are equal
            </summary>
            <param name="input">Instance of PublicGame to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PublicGame.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PublicGame.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.PublicGame.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.PublicGame.Name">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.PublicGame.PublishedKey">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.PublicGame.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.PublicGame.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="T:Org.MetaFab.Model.PublicPlayer">
            <summary>
            PublicPlayer
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.PublicPlayer.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,Org.MetaFab.Model.PublicPlayerWallet)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.PublicPlayer"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="gameId">This field has not had a description added..</param>
            <param name="walletId">This field has not had a description added..</param>
            <param name="username">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
            <param name="wallet">wallet.</param>
        </member>
        <member name="M:Org.MetaFab.Model.PublicPlayer.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PublicPlayer.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PublicPlayer.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PublicPlayer.Equals(Org.MetaFab.Model.PublicPlayer)">
            <summary>
            Returns true if PublicPlayer instances are equal
            </summary>
            <param name="input">Instance of PublicPlayer to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PublicPlayer.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PublicPlayer.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.PublicPlayer.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.PublicPlayer.GameId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.PublicPlayer.WalletId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.PublicPlayer.Username">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.PublicPlayer.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.PublicPlayer.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.PublicPlayer.Wallet">
            <summary>
            Gets or Sets Wallet
            </summary>
        </member>
        <member name="T:Org.MetaFab.Model.PublicPlayerWallet">
            <summary>
            PublicPlayerWallet
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.PublicPlayerWallet.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.PublicPlayerWallet"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="address">This field has not had a description added..</param>
        </member>
        <member name="M:Org.MetaFab.Model.PublicPlayerWallet.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PublicPlayerWallet.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PublicPlayerWallet.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PublicPlayerWallet.Equals(Org.MetaFab.Model.PublicPlayerWallet)">
            <summary>
            Returns true if PublicPlayerWallet instances are equal
            </summary>
            <param name="input">Instance of PublicPlayerWallet to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PublicPlayerWallet.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.PublicPlayerWallet.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.PublicPlayerWallet.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.PublicPlayerWallet.Address">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="T:Org.MetaFab.Model.RevokeCollectionRoleRequest">
            <summary>
            RevokeCollectionRoleRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.RevokeCollectionRoleRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.RevokeCollectionRoleRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.RevokeCollectionRoleRequest.#ctor(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.RevokeCollectionRoleRequest"/> class.
            </summary>
            <param name="role">A valid MetaFab role or bytes string representing a role, such as `minter` or `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7` (required).</param>
            <param name="address">A valid EVM based address to revoke the role from..</param>
            <param name="walletId">A wallet id within the MetaFab ecosystem to revoke the role from..</param>
        </member>
        <member name="M:Org.MetaFab.Model.RevokeCollectionRoleRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.RevokeCollectionRoleRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.RevokeCollectionRoleRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.RevokeCollectionRoleRequest.Equals(Org.MetaFab.Model.RevokeCollectionRoleRequest)">
            <summary>
            Returns true if RevokeCollectionRoleRequest instances are equal
            </summary>
            <param name="input">Instance of RevokeCollectionRoleRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.RevokeCollectionRoleRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.RevokeCollectionRoleRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.RevokeCollectionRoleRequest.Role">
            <summary>
            A valid MetaFab role or bytes string representing a role, such as &#x60;minter&#x60; or &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;
            </summary>
            <value>A valid MetaFab role or bytes string representing a role, such as &#x60;minter&#x60; or &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;</value>
        </member>
        <member name="P:Org.MetaFab.Model.RevokeCollectionRoleRequest.Address">
            <summary>
            A valid EVM based address to revoke the role from.
            </summary>
            <value>A valid EVM based address to revoke the role from.</value>
        </member>
        <member name="P:Org.MetaFab.Model.RevokeCollectionRoleRequest.WalletId">
            <summary>
            A wallet id within the MetaFab ecosystem to revoke the role from.
            </summary>
            <value>A wallet id within the MetaFab ecosystem to revoke the role from.</value>
        </member>
        <member name="T:Org.MetaFab.Model.SetCollectionApprovalRequest">
            <summary>
            SetCollectionApprovalRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.SetCollectionApprovalRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.SetCollectionApprovalRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.SetCollectionApprovalRequest.#ctor(System.Boolean,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.SetCollectionApprovalRequest"/> class.
            </summary>
            <param name="approved">A true or false value approves or disapproves the provided address or address associated with the provided walletId. (required).</param>
            <param name="address">A valid EVM based address to allow control over the authenticating game or player's wallet items for this collection..</param>
            <param name="walletId">A wallet id within the MetaFab ecosystem to allow control over the authenticating game or player's wallet items for this collection..</param>
        </member>
        <member name="M:Org.MetaFab.Model.SetCollectionApprovalRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetCollectionApprovalRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetCollectionApprovalRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetCollectionApprovalRequest.Equals(Org.MetaFab.Model.SetCollectionApprovalRequest)">
            <summary>
            Returns true if SetCollectionApprovalRequest instances are equal
            </summary>
            <param name="input">Instance of SetCollectionApprovalRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetCollectionApprovalRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetCollectionApprovalRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.SetCollectionApprovalRequest.Approved">
            <summary>
            A true or false value approves or disapproves the provided address or address associated with the provided walletId.
            </summary>
            <value>A true or false value approves or disapproves the provided address or address associated with the provided walletId.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetCollectionApprovalRequest.Address">
            <summary>
            A valid EVM based address to allow control over the authenticating game or player&#39;s wallet items for this collection.
            </summary>
            <value>A valid EVM based address to allow control over the authenticating game or player&#39;s wallet items for this collection.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetCollectionApprovalRequest.WalletId">
            <summary>
            A wallet id within the MetaFab ecosystem to allow control over the authenticating game or player&#39;s wallet items for this collection.
            </summary>
            <value>A wallet id within the MetaFab ecosystem to allow control over the authenticating game or player&#39;s wallet items for this collection.</value>
        </member>
        <member name="T:Org.MetaFab.Model.SetCollectionItemTimelockRequest">
            <summary>
            SetCollectionItemTimelockRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.SetCollectionItemTimelockRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.SetCollectionItemTimelockRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.SetCollectionItemTimelockRequest.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.SetCollectionItemTimelockRequest"/> class.
            </summary>
            <param name="timelock">A unix timestamp (in seconds) defining when the set timelock expires. (required).</param>
        </member>
        <member name="M:Org.MetaFab.Model.SetCollectionItemTimelockRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetCollectionItemTimelockRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetCollectionItemTimelockRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetCollectionItemTimelockRequest.Equals(Org.MetaFab.Model.SetCollectionItemTimelockRequest)">
            <summary>
            Returns true if SetCollectionItemTimelockRequest instances are equal
            </summary>
            <param name="input">Instance of SetCollectionItemTimelockRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetCollectionItemTimelockRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetCollectionItemTimelockRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.SetCollectionItemTimelockRequest.Timelock">
            <summary>
            A unix timestamp (in seconds) defining when the set timelock expires.
            </summary>
            <value>A unix timestamp (in seconds) defining when the set timelock expires.</value>
        </member>
        <member name="T:Org.MetaFab.Model.SetCurrencyFeesRequest">
            <summary>
            SetCurrencyFeesRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.SetCurrencyFeesRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.SetCurrencyFeesRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.SetCurrencyFeesRequest.#ctor(System.String,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.SetCurrencyFeesRequest"/> class.
            </summary>
            <param name="recipientAddress">The recipient address of currency transaction fees. (required).</param>
            <param name="basisPoints">A percentage fee for every transaction represented in basis points. To set a 1.5% fee, you would use a value of 150. This value can be 0, denoting no percentage fees. (required).</param>
            <param name="fixedAmount">A fixed fee for every transaction. A value of 0.5 would mean 0.5 of the currency of a transaction is always taken as a fee. This value can be 0, denoting no fixed fees. (required).</param>
            <param name="capAmount">The maximum fee amount for any single transaction. The total fee of a transaction is calculated as the sum of the basis points (percentage) fee, and fixed fee. If a calculated fee is greater than this maximum fee value, the maximum fee will be used instead. (required).</param>
        </member>
        <member name="M:Org.MetaFab.Model.SetCurrencyFeesRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetCurrencyFeesRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetCurrencyFeesRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetCurrencyFeesRequest.Equals(Org.MetaFab.Model.SetCurrencyFeesRequest)">
            <summary>
            Returns true if SetCurrencyFeesRequest instances are equal
            </summary>
            <param name="input">Instance of SetCurrencyFeesRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetCurrencyFeesRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetCurrencyFeesRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.SetCurrencyFeesRequest.RecipientAddress">
            <summary>
            The recipient address of currency transaction fees.
            </summary>
            <value>The recipient address of currency transaction fees.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetCurrencyFeesRequest.BasisPoints">
            <summary>
            A percentage fee for every transaction represented in basis points. To set a 1.5% fee, you would use a value of 150. This value can be 0, denoting no percentage fees.
            </summary>
            <value>A percentage fee for every transaction represented in basis points. To set a 1.5% fee, you would use a value of 150. This value can be 0, denoting no percentage fees.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetCurrencyFeesRequest.FixedAmount">
            <summary>
            A fixed fee for every transaction. A value of 0.5 would mean 0.5 of the currency of a transaction is always taken as a fee. This value can be 0, denoting no fixed fees.
            </summary>
            <value>A fixed fee for every transaction. A value of 0.5 would mean 0.5 of the currency of a transaction is always taken as a fee. This value can be 0, denoting no fixed fees.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetCurrencyFeesRequest.CapAmount">
            <summary>
            The maximum fee amount for any single transaction. The total fee of a transaction is calculated as the sum of the basis points (percentage) fee, and fixed fee. If a calculated fee is greater than this maximum fee value, the maximum fee will be used instead.
            </summary>
            <value>The maximum fee amount for any single transaction. The total fee of a transaction is calculated as the sum of the basis points (percentage) fee, and fixed fee. If a calculated fee is greater than this maximum fee value, the maximum fee will be used instead.</value>
        </member>
        <member name="T:Org.MetaFab.Model.SetExchangeOfferRequest">
            <summary>
            SetExchangeOfferRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.SetExchangeOfferRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.SetExchangeOfferRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.SetExchangeOfferRequest.#ctor(System.Decimal,System.String,System.String,System.Collections.Generic.List{System.Decimal},System.Collections.Generic.List{System.Decimal},System.String,System.String,System.Decimal,System.String,System.String,System.Collections.Generic.List{System.Decimal},System.Collections.Generic.List{System.Decimal},System.String,System.String,System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.SetExchangeOfferRequest"/> class.
            </summary>
            <param name="id">A unique offer id to use for this offer for the exchange. If an existing offer id is used, the current offer will be updated but the existing number of uses will be kept. If you want to reset the number of uses for an existing offer, first remove it using the remove offer endpoint, then set it. (required).</param>
            <param name="inputCollectionAddress">A valid EVM based ERC1155 or MetaFab game items contract address that represents the collection for input items required by this offer. `inputCollectionAddress` or `inputCollectionId` can optionally be provided..</param>
            <param name="inputCollectionId">A valid MetaFab collection id that represents the collection for input items required by this offer. `inputCollectionAddress` or `inputCollectionId` can optionally be provided..</param>
            <param name="inputCollectionItemIds">An array of item ids from the provided input collection that are required to use this offer. Input items are transferred from the wallet to the exchange contract upon using an offer..</param>
            <param name="inputCollectionItemAmounts">An array of amounts for each item id from the provided input collection that are required to use this offer. Item amounts array indices are reflective of the amount required for a given item id at the same index..</param>
            <param name="inputCurrencyAddress">A valid EVM based ERC20 or MetaFab game currency contract address that for the currency required by this offer..</param>
            <param name="inputCurrencyId">A valid MetaFab currency id that represents the currency required by this offer..</param>
            <param name="inputCurrencyAmount">The amount of currency required by this offer. If an inputCurrencyAmount is provided without in input currency address or id, the native chain currency is used as the required currency..</param>
            <param name="outputCollectionAddress">A valid EVM based ERC1155 or MetaFab game items contract address that represents the collection for output items given by this offer. `outputCollectionAddress` or `outputCollectionId` can optionally be provided..</param>
            <param name="outputCollectionId">A valid MetaFab collection id that represents the collection for output items given by this offer. `outputCollectionAddress` or `outputCollectionId` can optionally be provided..</param>
            <param name="outputCollectionItemIds">An array of item ids from the provided output collection that are given by this offer. Output items are automatically minted if the exchange contract has the `minter` role for the output collection contract. Otherwise, they are transferred from the item balance held by the exchange contract..</param>
            <param name="outputCollectionItemAmounts">An array of amounts for each item id from the provided output collection that are given by this offer. Item amounts array indices are reflective of the amount required for a given item id at the same index..</param>
            <param name="outputCurrencyAddress">A valid EVM based ERC20 or MetaFab game currency contract address that for the currency given by this offer. The output currency amount is automatically minted if the exchange contract has the `minter` role for the output currency contract. Otherwise, they are transferred from the currency balance held by the exchange contract..</param>
            <param name="outputCurrencyId">A valid MetaFab currency id for the currency given by this offer..</param>
            <param name="outputCurrencyAmount">The amount of currency given by this offer. If an outputCurrencyAmount is provided without an output currency address or id, the native chain currency is used as the given currency..</param>
            <param name="maxUses">The maximum number of times this offer can be used in total. maxUses is collective across all uses of the offer. If 5 unique players use an offer, that counts as 5 offer uses. Exclude this or use 0 to allow unlimited uses..</param>
        </member>
        <member name="M:Org.MetaFab.Model.SetExchangeOfferRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetExchangeOfferRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetExchangeOfferRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetExchangeOfferRequest.Equals(Org.MetaFab.Model.SetExchangeOfferRequest)">
            <summary>
            Returns true if SetExchangeOfferRequest instances are equal
            </summary>
            <param name="input">Instance of SetExchangeOfferRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetExchangeOfferRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetExchangeOfferRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.SetExchangeOfferRequest.Id">
            <summary>
            A unique offer id to use for this offer for the exchange. If an existing offer id is used, the current offer will be updated but the existing number of uses will be kept. If you want to reset the number of uses for an existing offer, first remove it using the remove offer endpoint, then set it.
            </summary>
            <value>A unique offer id to use for this offer for the exchange. If an existing offer id is used, the current offer will be updated but the existing number of uses will be kept. If you want to reset the number of uses for an existing offer, first remove it using the remove offer endpoint, then set it.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetExchangeOfferRequest.InputCollectionAddress">
            <summary>
            A valid EVM based ERC1155 or MetaFab game items contract address that represents the collection for input items required by this offer. &#x60;inputCollectionAddress&#x60; or &#x60;inputCollectionId&#x60; can optionally be provided.
            </summary>
            <value>A valid EVM based ERC1155 or MetaFab game items contract address that represents the collection for input items required by this offer. &#x60;inputCollectionAddress&#x60; or &#x60;inputCollectionId&#x60; can optionally be provided.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetExchangeOfferRequest.InputCollectionId">
            <summary>
            A valid MetaFab collection id that represents the collection for input items required by this offer. &#x60;inputCollectionAddress&#x60; or &#x60;inputCollectionId&#x60; can optionally be provided.
            </summary>
            <value>A valid MetaFab collection id that represents the collection for input items required by this offer. &#x60;inputCollectionAddress&#x60; or &#x60;inputCollectionId&#x60; can optionally be provided.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetExchangeOfferRequest.InputCollectionItemIds">
            <summary>
            An array of item ids from the provided input collection that are required to use this offer. Input items are transferred from the wallet to the exchange contract upon using an offer.
            </summary>
            <value>An array of item ids from the provided input collection that are required to use this offer. Input items are transferred from the wallet to the exchange contract upon using an offer.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetExchangeOfferRequest.InputCollectionItemAmounts">
            <summary>
            An array of amounts for each item id from the provided input collection that are required to use this offer. Item amounts array indices are reflective of the amount required for a given item id at the same index.
            </summary>
            <value>An array of amounts for each item id from the provided input collection that are required to use this offer. Item amounts array indices are reflective of the amount required for a given item id at the same index.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetExchangeOfferRequest.InputCurrencyAddress">
            <summary>
            A valid EVM based ERC20 or MetaFab game currency contract address that for the currency required by this offer.
            </summary>
            <value>A valid EVM based ERC20 or MetaFab game currency contract address that for the currency required by this offer.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetExchangeOfferRequest.InputCurrencyId">
            <summary>
            A valid MetaFab currency id that represents the currency required by this offer.
            </summary>
            <value>A valid MetaFab currency id that represents the currency required by this offer.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetExchangeOfferRequest.InputCurrencyAmount">
            <summary>
            The amount of currency required by this offer. If an inputCurrencyAmount is provided without in input currency address or id, the native chain currency is used as the required currency.
            </summary>
            <value>The amount of currency required by this offer. If an inputCurrencyAmount is provided without in input currency address or id, the native chain currency is used as the required currency.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetExchangeOfferRequest.OutputCollectionAddress">
            <summary>
            A valid EVM based ERC1155 or MetaFab game items contract address that represents the collection for output items given by this offer. &#x60;outputCollectionAddress&#x60; or &#x60;outputCollectionId&#x60; can optionally be provided.
            </summary>
            <value>A valid EVM based ERC1155 or MetaFab game items contract address that represents the collection for output items given by this offer. &#x60;outputCollectionAddress&#x60; or &#x60;outputCollectionId&#x60; can optionally be provided.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetExchangeOfferRequest.OutputCollectionId">
            <summary>
            A valid MetaFab collection id that represents the collection for output items given by this offer. &#x60;outputCollectionAddress&#x60; or &#x60;outputCollectionId&#x60; can optionally be provided.
            </summary>
            <value>A valid MetaFab collection id that represents the collection for output items given by this offer. &#x60;outputCollectionAddress&#x60; or &#x60;outputCollectionId&#x60; can optionally be provided.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetExchangeOfferRequest.OutputCollectionItemIds">
            <summary>
            An array of item ids from the provided output collection that are given by this offer. Output items are automatically minted if the exchange contract has the &#x60;minter&#x60; role for the output collection contract. Otherwise, they are transferred from the item balance held by the exchange contract.
            </summary>
            <value>An array of item ids from the provided output collection that are given by this offer. Output items are automatically minted if the exchange contract has the &#x60;minter&#x60; role for the output collection contract. Otherwise, they are transferred from the item balance held by the exchange contract.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetExchangeOfferRequest.OutputCollectionItemAmounts">
            <summary>
            An array of amounts for each item id from the provided output collection that are given by this offer. Item amounts array indices are reflective of the amount required for a given item id at the same index.
            </summary>
            <value>An array of amounts for each item id from the provided output collection that are given by this offer. Item amounts array indices are reflective of the amount required for a given item id at the same index.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetExchangeOfferRequest.OutputCurrencyAddress">
            <summary>
            A valid EVM based ERC20 or MetaFab game currency contract address that for the currency given by this offer. The output currency amount is automatically minted if the exchange contract has the &#x60;minter&#x60; role for the output currency contract. Otherwise, they are transferred from the currency balance held by the exchange contract.
            </summary>
            <value>A valid EVM based ERC20 or MetaFab game currency contract address that for the currency given by this offer. The output currency amount is automatically minted if the exchange contract has the &#x60;minter&#x60; role for the output currency contract. Otherwise, they are transferred from the currency balance held by the exchange contract.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetExchangeOfferRequest.OutputCurrencyId">
            <summary>
            A valid MetaFab currency id for the currency given by this offer.
            </summary>
            <value>A valid MetaFab currency id for the currency given by this offer.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetExchangeOfferRequest.OutputCurrencyAmount">
            <summary>
            The amount of currency given by this offer. If an outputCurrencyAmount is provided without an output currency address or id, the native chain currency is used as the given currency.
            </summary>
            <value>The amount of currency given by this offer. If an outputCurrencyAmount is provided without an output currency address or id, the native chain currency is used as the given currency.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetExchangeOfferRequest.MaxUses">
            <summary>
            The maximum number of times this offer can be used in total. maxUses is collective across all uses of the offer. If 5 unique players use an offer, that counts as 5 offer uses. Exclude this or use 0 to allow unlimited uses.
            </summary>
            <value>The maximum number of times this offer can be used in total. maxUses is collective across all uses of the offer. If 5 unique players use an offer, that counts as 5 offer uses. Exclude this or use 0 to allow unlimited uses.</value>
        </member>
        <member name="T:Org.MetaFab.Model.SetPlayerDataRequest">
            <summary>
            SetPlayerDataRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.SetPlayerDataRequest.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.SetPlayerDataRequest"/> class.
            </summary>
            <param name="protectedData">protectedData can only be set if `X-Authorization` includes credentials for the game the target player is a part of. Expects an arbitrary object allowed to contain any set of properties and nested data within those properties, including arrays..</param>
            <param name="publicData">publicData can be set if `X-Authorization` includes credentials for the target player or game the player is a part of. Expects an arbitrary object allowed to contain any set of properties and nested data within those properties, including arrays..</param>
        </member>
        <member name="M:Org.MetaFab.Model.SetPlayerDataRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetPlayerDataRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetPlayerDataRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetPlayerDataRequest.Equals(Org.MetaFab.Model.SetPlayerDataRequest)">
            <summary>
            Returns true if SetPlayerDataRequest instances are equal
            </summary>
            <param name="input">Instance of SetPlayerDataRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetPlayerDataRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.SetPlayerDataRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.SetPlayerDataRequest.ProtectedData">
            <summary>
            protectedData can only be set if &#x60;X-Authorization&#x60; includes credentials for the game the target player is a part of. Expects an arbitrary object allowed to contain any set of properties and nested data within those properties, including arrays.
            </summary>
            <value>protectedData can only be set if &#x60;X-Authorization&#x60; includes credentials for the game the target player is a part of. Expects an arbitrary object allowed to contain any set of properties and nested data within those properties, including arrays.</value>
        </member>
        <member name="P:Org.MetaFab.Model.SetPlayerDataRequest.PublicData">
            <summary>
            publicData can be set if &#x60;X-Authorization&#x60; includes credentials for the target player or game the player is a part of. Expects an arbitrary object allowed to contain any set of properties and nested data within those properties, including arrays.
            </summary>
            <value>publicData can be set if &#x60;X-Authorization&#x60; includes credentials for the target player or game the player is a part of. Expects an arbitrary object allowed to contain any set of properties and nested data within those properties, including arrays.</value>
        </member>
        <member name="T:Org.MetaFab.Model.TransactionModel">
            <summary>
            TransactionModel
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.TransactionModel.#ctor(System.String,System.String,System.String,System.String,System.Object,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.TransactionModel"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="contractId">This field has not had a description added..</param>
            <param name="walletId">This field has not had a description added..</param>
            <param name="function">This field has not had a description added..</param>
            <param name="args">This field has not had a description added..</param>
            <param name="hash">This field has not had a description added..</param>
            <param name="updatedAt">This field has not had a description added..</param>
            <param name="createdAt">This field has not had a description added..</param>
        </member>
        <member name="M:Org.MetaFab.Model.TransactionModel.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.TransactionModel.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.TransactionModel.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.TransactionModel.Equals(Org.MetaFab.Model.TransactionModel)">
            <summary>
            Returns true if TransactionModel instances are equal
            </summary>
            <param name="input">Instance of TransactionModel to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.TransactionModel.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.TransactionModel.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.TransactionModel.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.TransactionModel.ContractId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.TransactionModel.WalletId">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.TransactionModel.Function">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.TransactionModel.Args">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.TransactionModel.Hash">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.TransactionModel.UpdatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.TransactionModel.CreatedAt">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="T:Org.MetaFab.Model.TransferCollectionItemRequest">
            <summary>
            TransferCollectionItemRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.TransferCollectionItemRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.TransferCollectionItemRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.TransferCollectionItemRequest.#ctor(System.String,System.Collections.Generic.List{System.String},System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.TransferCollectionItemRequest"/> class.
            </summary>
            <param name="address">A valid EVM based addresses to transfer items to..</param>
            <param name="walletId">A wallet id within the MetaFab ecosystem to transfer items to..</param>
            <param name="quantity">The quantity of the collectionItemId to transfer. (required).</param>
        </member>
        <member name="M:Org.MetaFab.Model.TransferCollectionItemRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.TransferCollectionItemRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.TransferCollectionItemRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.TransferCollectionItemRequest.Equals(Org.MetaFab.Model.TransferCollectionItemRequest)">
            <summary>
            Returns true if TransferCollectionItemRequest instances are equal
            </summary>
            <param name="input">Instance of TransferCollectionItemRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.TransferCollectionItemRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.TransferCollectionItemRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.TransferCollectionItemRequest.Address">
            <summary>
            A valid EVM based addresses to transfer items to.
            </summary>
            <value>A valid EVM based addresses to transfer items to.</value>
        </member>
        <member name="P:Org.MetaFab.Model.TransferCollectionItemRequest.WalletId">
            <summary>
            A wallet id within the MetaFab ecosystem to transfer items to.
            </summary>
            <value>A wallet id within the MetaFab ecosystem to transfer items to.</value>
        </member>
        <member name="P:Org.MetaFab.Model.TransferCollectionItemRequest.Quantity">
            <summary>
            The quantity of the collectionItemId to transfer.
            </summary>
            <value>The quantity of the collectionItemId to transfer.</value>
        </member>
        <member name="T:Org.MetaFab.Model.TransferCurrencyRequest">
            <summary>
            TransferCurrencyRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.TransferCurrencyRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.TransferCurrencyRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.TransferCurrencyRequest.#ctor(System.String,System.String,System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.TransferCurrencyRequest"/> class.
            </summary>
            <param name="address">A valid EVM based address to transfer currency to. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`..</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem to transfer currency to..</param>
            <param name="amount">The amount of currency to transfer. (required).</param>
            <param name="reference">An optional uint256 number to reference the transfer. Commonly used to identify transfers intended to pay for game items or services..</param>
        </member>
        <member name="M:Org.MetaFab.Model.TransferCurrencyRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.TransferCurrencyRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.TransferCurrencyRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.TransferCurrencyRequest.Equals(Org.MetaFab.Model.TransferCurrencyRequest)">
            <summary>
            Returns true if TransferCurrencyRequest instances are equal
            </summary>
            <param name="input">Instance of TransferCurrencyRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.TransferCurrencyRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.TransferCurrencyRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.TransferCurrencyRequest.Address">
            <summary>
            A valid EVM based address to transfer currency to. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.
            </summary>
            <value>A valid EVM based address to transfer currency to. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.</value>
        </member>
        <member name="P:Org.MetaFab.Model.TransferCurrencyRequest.WalletId">
            <summary>
            Any wallet id within the MetaFab ecosystem to transfer currency to.
            </summary>
            <value>Any wallet id within the MetaFab ecosystem to transfer currency to.</value>
        </member>
        <member name="P:Org.MetaFab.Model.TransferCurrencyRequest.Amount">
            <summary>
            The amount of currency to transfer.
            </summary>
            <value>The amount of currency to transfer.</value>
        </member>
        <member name="P:Org.MetaFab.Model.TransferCurrencyRequest.Reference">
            <summary>
            An optional uint256 number to reference the transfer. Commonly used to identify transfers intended to pay for game items or services.
            </summary>
            <value>An optional uint256 number to reference the transfer. Commonly used to identify transfers intended to pay for game items or services.</value>
        </member>
        <member name="T:Org.MetaFab.Model.UpdateGameRequest">
            <summary>
            UpdateGameRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.UpdateGameRequest.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.UpdateGameRequest"/> class.
            </summary>
            <param name="name">A new name. Replaces the game's current name..</param>
            <param name="email">A new email address. The game's old email will no longer be valid for account authentication. `currentPassword` must also be provided..</param>
            <param name="currentPassword">The game's current password. Must be provided if setting `newPassword` or `email`..</param>
            <param name="newPassword">A new password. The game's old password will no longer be valid..</param>
            <param name="rpcs">Sets a custom RPC for your game to use instead of MetaFab's default RPCs for the chain(s) you specify.  Expects a JSON object containing key value pairs of supported `chain` -&gt; `rpc url`. Only the chain names provided as keys in the object will be explicitly overriden. To delete a custom RPC for your game, provide the chain name to delete as a key in the provided object and `null` as the value.  Set RPC example, `{ MATIC: 'https://polygon-rpc.com' }` Delete RPC example, `{ MATIC: null }`.</param>
            <param name="resetPublishedKey">Revokes the game's previous published key and returns a new one if true..</param>
            <param name="resetSecretKey">Revokes the game's previous secret key and returns a new on if true..</param>
        </member>
        <member name="M:Org.MetaFab.Model.UpdateGameRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.UpdateGameRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.UpdateGameRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.UpdateGameRequest.Equals(Org.MetaFab.Model.UpdateGameRequest)">
            <summary>
            Returns true if UpdateGameRequest instances are equal
            </summary>
            <param name="input">Instance of UpdateGameRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.UpdateGameRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.UpdateGameRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.UpdateGameRequest.Name">
            <summary>
            A new name. Replaces the game&#39;s current name.
            </summary>
            <value>A new name. Replaces the game&#39;s current name.</value>
        </member>
        <member name="P:Org.MetaFab.Model.UpdateGameRequest.Email">
            <summary>
            A new email address. The game&#39;s old email will no longer be valid for account authentication. &#x60;currentPassword&#x60; must also be provided.
            </summary>
            <value>A new email address. The game&#39;s old email will no longer be valid for account authentication. &#x60;currentPassword&#x60; must also be provided.</value>
        </member>
        <member name="P:Org.MetaFab.Model.UpdateGameRequest.CurrentPassword">
            <summary>
            The game&#39;s current password. Must be provided if setting &#x60;newPassword&#x60; or &#x60;email&#x60;.
            </summary>
            <value>The game&#39;s current password. Must be provided if setting &#x60;newPassword&#x60; or &#x60;email&#x60;.</value>
        </member>
        <member name="P:Org.MetaFab.Model.UpdateGameRequest.NewPassword">
            <summary>
            A new password. The game&#39;s old password will no longer be valid.
            </summary>
            <value>A new password. The game&#39;s old password will no longer be valid.</value>
        </member>
        <member name="P:Org.MetaFab.Model.UpdateGameRequest.Rpcs">
            <summary>
            Sets a custom RPC for your game to use instead of MetaFab&#39;s default RPCs for the chain(s) you specify.  Expects a JSON object containing key value pairs of supported &#x60;chain&#x60; -&gt; &#x60;rpc url&#x60;. Only the chain names provided as keys in the object will be explicitly overriden. To delete a custom RPC for your game, provide the chain name to delete as a key in the provided object and &#x60;null&#x60; as the value.  Set RPC example, &#x60;{ MATIC: &#39;https://polygon-rpc.com&#39; }&#x60; Delete RPC example, &#x60;{ MATIC: null }&#x60;
            </summary>
            <value>Sets a custom RPC for your game to use instead of MetaFab&#39;s default RPCs for the chain(s) you specify.  Expects a JSON object containing key value pairs of supported &#x60;chain&#x60; -&gt; &#x60;rpc url&#x60;. Only the chain names provided as keys in the object will be explicitly overriden. To delete a custom RPC for your game, provide the chain name to delete as a key in the provided object and &#x60;null&#x60; as the value.  Set RPC example, &#x60;{ MATIC: &#39;https://polygon-rpc.com&#39; }&#x60; Delete RPC example, &#x60;{ MATIC: null }&#x60;</value>
        </member>
        <member name="P:Org.MetaFab.Model.UpdateGameRequest.ResetPublishedKey">
            <summary>
            Revokes the game&#39;s previous published key and returns a new one if true.
            </summary>
            <value>Revokes the game&#39;s previous published key and returns a new one if true.</value>
        </member>
        <member name="P:Org.MetaFab.Model.UpdateGameRequest.ResetSecretKey">
            <summary>
            Revokes the game&#39;s previous secret key and returns a new on if true.
            </summary>
            <value>Revokes the game&#39;s previous secret key and returns a new on if true.</value>
        </member>
        <member name="T:Org.MetaFab.Model.UpdatePlayerRequest">
            <summary>
            UpdatePlayerRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.UpdatePlayerRequest.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.UpdatePlayerRequest"/> class.
            </summary>
            <param name="currentPassword">The player's current password. Must be provided if setting `newPassword`..</param>
            <param name="newPassword">A new password. The player's old password will no longer be valid..</param>
            <param name="resetAccessToken">Revokes the player's previous access token and returns a new one if true..</param>
        </member>
        <member name="M:Org.MetaFab.Model.UpdatePlayerRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.UpdatePlayerRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.UpdatePlayerRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.UpdatePlayerRequest.Equals(Org.MetaFab.Model.UpdatePlayerRequest)">
            <summary>
            Returns true if UpdatePlayerRequest instances are equal
            </summary>
            <param name="input">Instance of UpdatePlayerRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.UpdatePlayerRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.UpdatePlayerRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.UpdatePlayerRequest.CurrentPassword">
            <summary>
            The player&#39;s current password. Must be provided if setting &#x60;newPassword&#x60;.
            </summary>
            <value>The player&#39;s current password. Must be provided if setting &#x60;newPassword&#x60;.</value>
        </member>
        <member name="P:Org.MetaFab.Model.UpdatePlayerRequest.NewPassword">
            <summary>
            A new password. The player&#39;s old password will no longer be valid.
            </summary>
            <value>A new password. The player&#39;s old password will no longer be valid.</value>
        </member>
        <member name="P:Org.MetaFab.Model.UpdatePlayerRequest.ResetAccessToken">
            <summary>
            Revokes the player&#39;s previous access token and returns a new one if true.
            </summary>
            <value>Revokes the player&#39;s previous access token and returns a new one if true.</value>
        </member>
        <member name="T:Org.MetaFab.Model.WalletModel">
            <summary>
            WalletModel
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.WalletModel.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.WalletModel"/> class.
            </summary>
            <param name="id">This field has not had a description added..</param>
            <param name="address">This field has not had a description added..</param>
        </member>
        <member name="M:Org.MetaFab.Model.WalletModel.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.WalletModel.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.WalletModel.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.WalletModel.Equals(Org.MetaFab.Model.WalletModel)">
            <summary>
            Returns true if WalletModel instances are equal
            </summary>
            <param name="input">Instance of WalletModel to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.WalletModel.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.WalletModel.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.WalletModel.Id">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="P:Org.MetaFab.Model.WalletModel.Address">
            <summary>
            This field has not had a description added.
            </summary>
            <value>This field has not had a description added.</value>
        </member>
        <member name="T:Org.MetaFab.Model.WithdrawFromExchangeRequest">
            <summary>
            WithdrawFromExchangeRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.WithdrawFromExchangeRequest.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.WithdrawFromExchangeRequest"/> class.
            </summary>
            <param name="address">A valid EVM based address to withdraw to. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`..</param>
            <param name="walletId">Any wallet id within the MetaFab ecosystem to withdraw to..</param>
            <param name="currencyAddress">The address of the currency (ERC20) token to withdraw from the exchange. If no currencyAddress or currencyId, and no collectionAddress or collectionId are provided, the native token held by the exchange will be withdrawn..</param>
            <param name="currencyId">A valid MetaFab currency id that represents the currency token to withdraw from the exchange. `currencyAddress` or `currencyId` can be provided when withdrawing currency..</param>
            <param name="collectionAddress">The address of the collection (ERC1155) for the items to withdraw from the exchange. If no currencyAddress and no collectionAddress is provided, the native token held by the exchange will be withdrawn..</param>
            <param name="collectionId">A valid MetaFab collection id that represents the collection for the items to withdraw from the exchange. `collectionAddress` or `collectionId` can be provided when withdrawing items..</param>
            <param name="itemIds">The specific itemIds of the provided collection to withdraw from the exchange..</param>
        </member>
        <member name="M:Org.MetaFab.Model.WithdrawFromExchangeRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.WithdrawFromExchangeRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.WithdrawFromExchangeRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.WithdrawFromExchangeRequest.Equals(Org.MetaFab.Model.WithdrawFromExchangeRequest)">
            <summary>
            Returns true if WithdrawFromExchangeRequest instances are equal
            </summary>
            <param name="input">Instance of WithdrawFromExchangeRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.WithdrawFromExchangeRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.WithdrawFromExchangeRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.WithdrawFromExchangeRequest.Address">
            <summary>
            A valid EVM based address to withdraw to. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.
            </summary>
            <value>A valid EVM based address to withdraw to. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.</value>
        </member>
        <member name="P:Org.MetaFab.Model.WithdrawFromExchangeRequest.WalletId">
            <summary>
            Any wallet id within the MetaFab ecosystem to withdraw to.
            </summary>
            <value>Any wallet id within the MetaFab ecosystem to withdraw to.</value>
        </member>
        <member name="P:Org.MetaFab.Model.WithdrawFromExchangeRequest.CurrencyAddress">
            <summary>
            The address of the currency (ERC20) token to withdraw from the exchange. If no currencyAddress or currencyId, and no collectionAddress or collectionId are provided, the native token held by the exchange will be withdrawn.
            </summary>
            <value>The address of the currency (ERC20) token to withdraw from the exchange. If no currencyAddress or currencyId, and no collectionAddress or collectionId are provided, the native token held by the exchange will be withdrawn.</value>
        </member>
        <member name="P:Org.MetaFab.Model.WithdrawFromExchangeRequest.CurrencyId">
            <summary>
            A valid MetaFab currency id that represents the currency token to withdraw from the exchange. &#x60;currencyAddress&#x60; or &#x60;currencyId&#x60; can be provided when withdrawing currency.
            </summary>
            <value>A valid MetaFab currency id that represents the currency token to withdraw from the exchange. &#x60;currencyAddress&#x60; or &#x60;currencyId&#x60; can be provided when withdrawing currency.</value>
        </member>
        <member name="P:Org.MetaFab.Model.WithdrawFromExchangeRequest.CollectionAddress">
            <summary>
            The address of the collection (ERC1155) for the items to withdraw from the exchange. If no currencyAddress and no collectionAddress is provided, the native token held by the exchange will be withdrawn.
            </summary>
            <value>The address of the collection (ERC1155) for the items to withdraw from the exchange. If no currencyAddress and no collectionAddress is provided, the native token held by the exchange will be withdrawn.</value>
        </member>
        <member name="P:Org.MetaFab.Model.WithdrawFromExchangeRequest.CollectionId">
            <summary>
            A valid MetaFab collection id that represents the collection for the items to withdraw from the exchange. &#x60;collectionAddress&#x60; or &#x60;collectionId&#x60; can be provided when withdrawing items.
            </summary>
            <value>A valid MetaFab collection id that represents the collection for the items to withdraw from the exchange. &#x60;collectionAddress&#x60; or &#x60;collectionId&#x60; can be provided when withdrawing items.</value>
        </member>
        <member name="P:Org.MetaFab.Model.WithdrawFromExchangeRequest.ItemIds">
            <summary>
            The specific itemIds of the provided collection to withdraw from the exchange.
            </summary>
            <value>The specific itemIds of the provided collection to withdraw from the exchange.</value>
        </member>
        <member name="T:Org.MetaFab.Model.WriteContractRequest">
            <summary>
            WriteContractRequest
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.WriteContractRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.WriteContractRequest"/> class.
            </summary>
        </member>
        <member name="M:Org.MetaFab.Model.WriteContractRequest.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Org.MetaFab.Model.WriteContractRequest"/> class.
            </summary>
            <param name="func">A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, `mint`. (required).</param>
            <param name="args">An array of args. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, `[123, \"Hello\", false]`..</param>
        </member>
        <member name="M:Org.MetaFab.Model.WriteContractRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.WriteContractRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Org.MetaFab.Model.WriteContractRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.WriteContractRequest.Equals(Org.MetaFab.Model.WriteContractRequest)">
            <summary>
            Returns true if WriteContractRequest instances are equal
            </summary>
            <param name="input">Instance of WriteContractRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Org.MetaFab.Model.WriteContractRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Org.MetaFab.Model.WriteContractRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="P:Org.MetaFab.Model.WriteContractRequest.Func">
            <summary>
            A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;mint&#x60;.
            </summary>
            <value>A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;mint&#x60;.</value>
        </member>
        <member name="P:Org.MetaFab.Model.WriteContractRequest.Args">
            <summary>
            An array of args. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;[123, \&quot;Hello\&quot;, false]&#x60;.
            </summary>
            <value>An array of args. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;[123, \&quot;Hello\&quot;, false]&#x60;.</value>
        </member>
    </members>
</doc>
